{
    "version": "https://jsonfeed.org/version/1",
    "title": "Jiankychen's Blog",
    "subtitle": "Never put off till tomorrow what you can do today",
    "icon": "https://jiankychen.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://jiankychen.github.io",
    "items": [
        {
            "id": "https://jiankychen.github.io/posts/b80c5159/",
            "url": "https://jiankychen.github.io/posts/b80c5159/",
            "title": "conda 常用命令",
            "date_published": "2023-01-19T03:47:56.000Z",
            "content_html": "<h1 id=\"conda-基本操作\"><a class=\"anchor\" href=\"#conda-基本操作\">#</a> conda 基本操作</h1>\n<h2 id=\"查看-conda-版本\"><a class=\"anchor\" href=\"#查看-conda-版本\">#</a> 查看 conda 版本</h2>\n<pre><code>conda --version\n</code></pre>\n<h2 id=\"更新-conda\"><a class=\"anchor\" href=\"#更新-conda\">#</a> 更新 conda</h2>\n<pre><code>conda update conda\n</code></pre>\n<h2 id=\"查看-conda-环境配置\"><a class=\"anchor\" href=\"#查看-conda-环境配置\">#</a> 查看 conda 环境配置</h2>\n<pre><code>conda config --show\n</code></pre>\n<h2 id=\"设置镜像源\"><a class=\"anchor\" href=\"#设置镜像源\">#</a> 设置镜像源</h2>\n<pre><code># 设置清华镜像\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\nconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/\n\n# 设置 bioconda\nconda config --add channels bioconda\nconda config --add channels conda-forge\n\n# 设置搜索时显示通道地址\nconda config --set show_channel_urls yes\n</code></pre>\n<h2 id=\"查询指定命令的功能\"><a class=\"anchor\" href=\"#查询指定命令的功能\">#</a> 查询指定命令的功能</h2>\n<pre><code>conda command_name --help\n</code></pre>\n<h1 id=\"管理环境\"><a class=\"anchor\" href=\"#管理环境\">#</a> 管理环境</h1>\n<h2 id=\"显示所有虚拟环境\"><a class=\"anchor\" href=\"#显示所有虚拟环境\">#</a> 显示所有虚拟环境</h2>\n<pre><code>conda env list\n</code></pre>\n<h2 id=\"创建虚拟环境\"><a class=\"anchor\" href=\"#创建虚拟环境\">#</a> 创建虚拟环境</h2>\n<pre><code>conda create -n env_name package_name\n</code></pre>\n<p>如果需要指定 package 版本，可直接在 package_name 之后加上  <code>=</code>  号以及 package 版本号，例如：</p>\n<pre><code>conda create -n env_name python=3.x\n</code></pre>\n<p>如果需要安装多个 package ，在 env_name 之后用空格分隔多个 package_name 即可，例如：</p>\n<pre><code>conda create -n python310 python=3.10 numpy pandas\n</code></pre>\n<h2 id=\"激活环境\"><a class=\"anchor\" href=\"#激活环境\">#</a> 激活环境</h2>\n<pre><code>activate env_name\n</code></pre>\n<h2 id=\"退出环境\"><a class=\"anchor\" href=\"#退出环境\">#</a> 退出环境</h2>\n<pre><code>deactivate env_name\n</code></pre>\n<h2 id=\"删除虚拟环境\"><a class=\"anchor\" href=\"#删除虚拟环境\">#</a> 删除虚拟环境</h2>\n<pre><code>conda env remove -n env_name\n</code></pre>\n<h2 id=\"导出虚拟环境\"><a class=\"anchor\" href=\"#导出虚拟环境\">#</a> 导出虚拟环境</h2>\n<pre><code>conda env export --name env_name &gt; environment.yml\n</code></pre>\n<h2 id=\"导入虚拟环境\"><a class=\"anchor\" href=\"#导入虚拟环境\">#</a> 导入虚拟环境</h2>\n<pre><code>conda env create -n env_name -f environment.yml\n</code></pre>\n<h1 id=\"管理-package\"><a class=\"anchor\" href=\"#管理-package\">#</a> 管理 package</h1>\n<h2 id=\"查看当前环境包含的所有-package\"><a class=\"anchor\" href=\"#查看当前环境包含的所有-package\">#</a> 查看当前环境包含的所有 package</h2>\n<pre><code>conda list\n</code></pre>\n<h2 id=\"更新当前环境包含的所有-package\"><a class=\"anchor\" href=\"#更新当前环境包含的所有-package\">#</a> 更新当前环境包含的所有 package</h2>\n<pre><code>conda upgrade --all\n</code></pre>\n<h2 id=\"更新指定-package\"><a class=\"anchor\" href=\"#更新指定-package\">#</a> 更新指定 package</h2>\n<pre><code>conda update package_name\n</code></pre>\n<h2 id=\"安装指定-package\"><a class=\"anchor\" href=\"#安装指定-package\">#</a> 安装指定 package</h2>\n<pre><code>conda install package_name\n</code></pre>\n<p>安装装多个 package ：</p>\n<pre><code>conda installl package_name_1 package_name_2 package_name_3\n</code></pre>\n<p>安装固定版本的 package ：</p>\n<pre><code>conda install package_name=package_version_number\n</code></pre>\n<h2 id=\"移除指定-package\"><a class=\"anchor\" href=\"#移除指定-package\">#</a> 移除指定 package</h2>\n<pre><code>conda remove package_name \n</code></pre>\n<p>参考资料：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82Nzc0NTE2MA==\">conda 常用命令</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW54eV9id2F2ZS9hcnRpY2xlL2RldGFpbHMvMTE5OTk2MDAx\">Anaconda conda 常用命令：从入门到精通</span></li>\n</ul>\n",
            "tags": [
                "Tutorial"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/11ea1840/",
            "url": "https://jiankychen.github.io/posts/11ea1840/",
            "title": "Python 异常、模块、包",
            "date_published": "2023-01-15T10:19:13.000Z",
            "content_html": "<h1 id=\"异常\"><a class=\"anchor\" href=\"#异常\">#</a> 异常</h1>\n<p>异常是指程序运行的过程中出现了错误</p>\n<blockquote>\n<p>bug 就是指异常，历史上因为小虫子导致计算机失灵，所以延续至今，bug 就代表软件出现错误</p>\n</blockquote>\n<h2 id=\"异常的捕获\"><a class=\"anchor\" href=\"#异常的捕获\">#</a> 异常的捕获</h2>\n<p>异常处理（捕获异常）：针对可能出现的异常，提前做好准备，当真的出现异常时，可以有后续处置，以免其导致程序无法正常运行</p>\n<h3 id=\"捕获常规异常\"><a class=\"anchor\" href=\"#捕获常规异常\">#</a> 捕获常规异常</h3>\n<p>语法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    尝试执行的代码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    若出现异常，将会执行本段代码</pre></td></tr></table></figure><p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 尝试以 'r' 模式打开文件，如果文件不存在，则以 'w' 方式打开</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'linux.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'linux.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"捕获指定异常\"><a class=\"anchor\" href=\"#捕获指定异常\">#</a> 捕获指定异常</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    尝试执行的代码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> ErrorType <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    若出现类型为 ErrorType 的异常，将会执行本段代码</pre></td></tr></table></figure><p>其中，ErrorType 是指要捕获的异常类型</p>\n<p>注意：如果 “尝试执行的代码” 的异常类型和要捕获的异常类型不一致，则无法捕获异常</p>\n<p>常见的异常类型如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类名</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>SyntaxError</code></td>\n<td style=\"text-align:center\">发生语法错误时引发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>FileNotFoundError</code></td>\n<td style=\"text-align:center\">未找到指定文件或目录时引发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>NameError</code></td>\n<td style=\"text-align:center\">找不到指定名称的变量时引发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ZeroDivisionError</code></td>\n<td style=\"text-align:center\">除数为 0 时的异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>IndexError</code></td>\n<td style=\"text-align:center\">当使用超出列表范围的索引时引发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>KeyError</code></td>\n<td style=\"text-align:center\">当使用映射不存在的键时引发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>AttributeError</code></td>\n<td style=\"text-align:center\">当尝试访问未知对象属性时引发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>TypeError</code></td>\n<td style=\"text-align:center\">当试图在使用 a 类型的场合使用 b 类型时引发</td>\n</tr>\n</tbody>\n</table>\n<p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> NameError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'未定义 name 变量'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"捕获多个异常\"><a class=\"anchor\" href=\"#捕获多个异常\">#</a> 捕获多个异常</h3>\n<p>当需要捕获多个异常时，可以把要捕获的异常类型的名字，放到 except 后，并使用元组的方式进行书写</p>\n<p>例如：</p>\n<p>捕获多个异常（但不输出异常的具体描述）：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>NameError<span class=\"token punctuation\">,</span> ZeroDivisionError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'错误...'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>捕获多个异常并输出异常的具体信息：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> <span class=\"token punctuation\">(</span>NameError<span class=\"token punctuation\">,</span> ZeroDivisionError<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"捕获所有异常\"><a class=\"anchor\" href=\"#捕获所有异常\">#</a> 捕获所有异常</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    尝试执行的代码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    若出现异常，将会执行本段代码</pre></td></tr></table></figure><p>注意： <code>except:</code>  与  <code>except Exception as e:</code>  这两种方式都可以捕获全部的异常</p>\n<h3 id=\"异常-else\"><a class=\"anchor\" href=\"#异常-else\">#</a> 异常 else</h3>\n<p><code>else</code>  表示没有异常时要执行的代码</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    尝试执行的代码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    若出现异常，将会执行本段代码</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    若没有出现异常，将会执行本段代码</pre></td></tr></table></figure><h3 id=\"异常-finally\"><a class=\"anchor\" href=\"#异常-finally\">#</a> 异常 finally</h3>\n<p><code>finally</code>  表示无论是否异常都要执行的代码，例如关闭文件</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    尝试执行的代码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    若出现异常，将会执行本段代码</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    若没有出现异常，将会执行本段代码</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    无论是否出现异常，都会执行本段代码</pre></td></tr></table></figure><h3 id=\"异常的传递\"><a class=\"anchor\" href=\"#异常的传递\">#</a> 异常的传递</h3>\n<p>异常具有传递性：</p>\n<ul>\n<li>\n<p>当函数 / 方法执行出现异常，会将异常传递给函数 / 方法的调用一方</p>\n</li>\n<li>\n<p>如果传递到主程序，仍然没有异常处理，程序才会被终止</p>\n</li>\n</ul>\n<p>利用异常具有传递性的特点，当我们想要保证程序不会因为异常崩溃的时候，就可以在  <code>main</code>  函数中设置异常捕获，由于无论在整个程序哪里发生异常，最终都会传递到  <code>main</code>  函数中，这样就可以确保所有的异常都会被捕获</p>\n<h1 id=\"模块\"><a class=\"anchor\" href=\"#模块\">#</a> 模块</h1>\n<p>Python 模块（Module），是一个 Python 文件，以  <code>.py</code>  为后缀名</p>\n<p>模块能定义函数、类和变量，模块里也能包含可执行的代码</p>\n<p>可以认为一个模块就是一个工具包，每一个工具包中都有各种不同的工具供我们使用，以实现各种不同的功能</p>\n<h2 id=\"导入模块\"><a class=\"anchor\" href=\"#导入模块\">#</a> 导入模块</h2>\n<p>在使用模块之前，需要先将模块导入 Python 程序</p>\n<p>常用的导入模块方式：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> module_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> module_name <span class=\"token keyword\">import</span> class_name<span class=\"token punctuation\">,</span> var_name<span class=\"token punctuation\">,</span> func_name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> module_name <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> module_name <span class=\"token keyword\">as</span> nick_name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> module_name <span class=\"token keyword\">import</span> func_name <span class=\"token keyword\">as</span> nick_name</pre></td></tr></table></figure><p>其中：</p>\n<ul>\n<li>module_name 表示模块</li>\n<li>class_name 表示模块内的类</li>\n<li>var_name 表示模块内的变量</li>\n<li>func_name 表示模块内的函数</li>\n<li>nick_name 表示为模块自定义的别名</li>\n</ul>\n<p>注意：导入模块时，module_name 不需要包含  <code>.py</code>  后缀</p>\n<h3 id=\"import-module_name\"><a class=\"anchor\" href=\"#import-module_name\">#</a> import module_name</h3>\n<p>使用  <code>import</code>  导入模块后，可以通过  <code>'.'</code>  来使用模块中的函数或类</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> module_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module_name<span class=\"token punctuation\">.</span>func_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>module_name<span class=\"token punctuation\">.</span>class_name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>module_name<span class=\"token punctuation\">.</span>var_name</pre></td></tr></table></figure><h3 id=\"from-module_name-import-func_name\"><a class=\"anchor\" href=\"#from-module_name-import-func_name\">#</a> from module_name import func_name</h3>\n<p>使用  <code>from … import …</code>  方式导入之后，无需添加前缀，直接调用即可</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> module_name <span class=\"token keyword\">import</span> func_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>func_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意，利用  <code>from</code>  把内容从模块中导入后，会导致相同名称的内容被覆盖，也就是说，不同模块的命名空间会在此处重叠</p>\n<h3 id=\"from-module_name-import\"><a class=\"anchor\" href=\"#from-module_name-import\">#</a> from module_name import *</h3>\n<p>导入模块全部内容</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> module_name <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>func_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>class_name</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>var_name</pre></td></tr></table></figure><h3 id=\"as-nick_name\"><a class=\"anchor\" href=\"#as-nick_name\">#</a> as nick_name</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 模块定义别名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> module_name <span class=\"token keyword\">as</span> nick_name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 功能定义别名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> module_name <span class=\"token keyword\">import</span> func_name <span class=\"token keyword\">as</span> func_nick_name</pre></td></tr></table></figure><h2 id=\"自定义模块\"><a class=\"anchor\" href=\"#自定义模块\">#</a> 自定义模块</h2>\n<p>每个 Python 文件都可以作为一个模块，模块的名字就是文件的名字</p>\n<p>因此，自定义模块只需在 Python 代码文件中正常写代码即可，通过 import、from 关键字导入（与导入 Python 内置模块一样）即可使用。但是需要注意，自定义模块名必须要符合标识符命名规则</p>\n<h3 id=\"__main__-变量\"><a class=\"anchor\" href=\"#__main__-变量\">#</a> __main__ 变量</h3>\n<p><code>if __main__ == “__main__”</code>  语句的作用：只有当含有该语句的 Python 程序是被直接 run 时，才会进入  <code>if</code>  内部。如果是被导入的，则无法进入  <code>if</code></p>\n<p>该功能常用于测试模块（即，希望某些代码在测试时运行、而在被导入时不运行）</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 只在当前文件中调用该函数，其他导入的文件内均不执行 test 函数调用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    test <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果不加  <code>if __name__ == &quot;__main__&quot;</code>  语句：无论是当前文件，还是其他已经导入了该模块的文件，在运行的时候都会自动执行  <code>test</code>  函数的调用</p>\n<h3 id=\"__all__-变量\"><a class=\"anchor\" href=\"#__all__-变量\">#</a> __all__ 变量</h3>\n<p>如果一个模块文件中有  <code>__all__</code>  变量（该变量为列表对象），在使用  <code>from xxx import *</code>  导入该模块时，只能导入  <code>__all__</code>  列表中的元素</p>\n<p>因此， <code>__all__</code>  变量可以控制  <code>import *</code>  导入模块时的导入内容</p>\n<p>注意： <code>__all__</code>  变量 仅影响  <code>from ... import *</code>  这一导入方式</p>\n<p>例如，自定义如下模块：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>__all__ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Test_A'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Test_A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    xxx</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">Test_B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    xxx</pre></td></tr></table></figure><p>通过  <code>from ... import *</code>  导入该模块后，只能使用  <code>Test_A</code>  函数，而不能使用  <code>Test_B</code>  函数</p>\n<h1 id=\"包\"><a class=\"anchor\" href=\"#包\">#</a> 包</h1>\n<p>如果 Python 模块太多，可以通过 Python 包（Package）来管理</p>\n<p>当我们的模块文件非常多时，包可以帮助我们管理这些模块，包的作用就是包含多个模块，但包的本质依然是模块</p>\n<ul>\n<li>\n<p>从物理上看：包就是一个文件夹，在该文件夹下包含了一个  <code>__init__.py</code>  文件，该文件夹可包含多个模块文件</p>\n</li>\n<li>\n<p>从逻辑上看：包的本质依然是模块</p>\n</li>\n</ul>\n<h2 id=\"自定义包\"><a class=\"anchor\" href=\"#自定义包\">#</a> 自定义包</h2>\n<p>基本步骤：</p>\n<ul>\n<li>新建 Python Package</li>\n<li>新建 Python 模块</li>\n</ul>\n<p>在 Pycharm 中，点击  <code>new --&gt; Python Package</code>  新建包后，包内部会自动创建  <code>__init__.py</code>  文件，这个文件控制着包的导入行为</p>\n<h2 id=\"导入包\"><a class=\"anchor\" href=\"#导入包\">#</a> 导入包</h2>\n<h3 id=\"import-xxx\"><a class=\"anchor\" href=\"#import-xxx\">#</a> import xxx</h3>\n<h4 id=\"导入所有模块\"><a class=\"anchor\" href=\"#导入所有模块\">#</a> 导入所有模块</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> package_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>package_name<span class=\"token punctuation\">.</span>module_name<span class=\"token punctuation\">.</span>func_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"导入指定模块\"><a class=\"anchor\" href=\"#导入指定模块\">#</a> 导入指定模块</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> package_name<span class=\"token punctuation\">.</span>module_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>package_name<span class=\"token punctuation\">.</span>module_name<span class=\"token punctuation\">.</span>func_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>其中：</p>\n<ul>\n<li>package_name 表示 Python Package 名称</li>\n<li>module_name 表示 Python Package 中的模块名称</li>\n<li>func_name 表示模块中的函数名称</li>\n</ul>\n<h3 id=\"from-xxx-import\"><a class=\"anchor\" href=\"#from-xxx-import\">#</a> from xxx import</h3>\n<h4 id=\"导入所有模块-2\"><a class=\"anchor\" href=\"#导入所有模块-2\">#</a> 导入所有模块</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> package_name <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module_name<span class=\"token punctuation\">.</span>func_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：必须在  <code>__init__.py</code>  文件中添加  <code>__all__</code>  变量，用于控制  <code>from package_name import *</code>  导入的模块列表（类似于模块文件中的  <code>__all__</code>  变量）</p>\n<h4 id=\"导入指定模块-2\"><a class=\"anchor\" href=\"#导入指定模块-2\">#</a> 导入指定模块</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> package_name <span class=\"token keyword\">import</span> module_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module_name<span class=\"token punctuation\">.</span>func_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"导入指定模块中的指定函数\"><a class=\"anchor\" href=\"#导入指定模块中的指定函数\">#</a> 导入指定模块中的指定函数</h4>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> package_name<span class=\"token punctuation\">.</span>module_name <span class=\"token keyword\">import</span> func_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>func_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"第三方包\"><a class=\"anchor\" href=\"#第三方包\">#</a> 第三方包</h2>\n<p>在 Python 程序的生态中，有许多非常多的第三方包（非 Python 官方），可以极大的帮助我们提高开发效率，如：</p>\n<ul>\n<li>科学计算：numpy</li>\n<li>数据分析：pandas</li>\n<li>大数据计算：pyspark、apache-flink</li>\n<li>图形可视化：matplotlib、pyecharts</li>\n<li>人工智能：tensorflow</li>\n</ul>\n<p>注意，Python 没有内置这些第三方包，需要安装它们才可以导入使用</p>\n<p>可通过 Python 内置的 pip 安装指定的第三方包</p>\n<p>即，在命令行中输入：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip install package_name</pre></td></tr></table></figure><p>pip 是连接外网进行下载，若下载速度相对较慢，可考虑通过国内的镜像源下载</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pip install <span class=\"token operator\">-</span>i https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>pypi<span class=\"token punctuation\">.</span>tuna<span class=\"token punctuation\">.</span>tsinghua<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">/</span>simple package_name</pre></td></tr></table></figure>",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/78c82d0a/",
            "url": "https://jiankychen.github.io/posts/78c82d0a/",
            "title": "Python 文件操作",
            "date_published": "2023-01-14T09:51:32.000Z",
            "content_html": "<h1 id=\"文件编码\"><a class=\"anchor\" href=\"#文件编码\">#</a> 文件编码</h1>\n<p>编码：一种规则集合，记录了内容和二进制间进行相互转换的逻辑</p>\n<p>计算机中有许多可用编码，例如：</p>\n<ul>\n<li>UTF-8</li>\n<li>GBK</li>\n<li>Big5</li>\n</ul>\n<p>UTF-8 是目前全球通用的编码格式</p>\n<p>除非有特殊需求，否则，一律以 UTF-8 格式进行文件编码即可</p>\n<h1 id=\"文件的读取\"><a class=\"anchor\" href=\"#文件的读取\">#</a> 文件的读取</h1>\n<h2 id=\"访问模式\"><a class=\"anchor\" href=\"#访问模式\">#</a> 访问模式</h2>\n<p>常用的三种基础访问模式：</p>\n<ul>\n<li><code>'r'</code>  ：以 <strong>只读</strong> 方式打开文件（默认模式）。文件的指针将会放在文件的开头</li>\n<li><code>'w'</code>  ：打开文件只用于 <strong>写入</strong> 。如果该文件已存在，则打开文件，并从开头开始编辑（原有内容会被删除）；如果该文件不存在，创建新文件</li>\n<li><code>'a'</code>  ：打开一个文件用于 <strong>追加</strong> 。如果该文件已存在，新的内容将会被写入到已有内容之后；如果该文件不存在，创建新文件进行写入</li>\n</ul>\n<h2 id=\"打开文件\"><a class=\"anchor\" href=\"#打开文件\">#</a> 打开文件</h2>\n<p>使用  <code>open</code>  函数可以打开一个已经存在的文件，或者创建一个新文件（使用  <code>'w'</code>  模式时）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>其中：</p>\n<ul>\n<li>name：字符串，表示目标文件的文件名（可以包含文件所在的路径）</li>\n<li>mode：设置打开文件的模式（访问模式）：只读、写入、追加等</li>\n<li>encoding：编码格式（推荐使用 UTF-8）</li>\n</ul>\n<p><strong>操作文件需要通过  <code>open</code>  函数打开文件得到文件对象</strong></p>\n<p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># encoding 不是第三个位置参数，需要采用关键字传参</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>file_obj <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'python.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'UTF-8'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：此时的  <code>file_obj</code>  是  <code>open</code>  函数的文件对象（Python 中一种特殊的数据类型），拥有属性和方法，可以使用  <code>对象.属性</code>  或  <code>对象.方法</code>  对其进行访问</p>\n<h2 id=\"关闭文件\"><a class=\"anchor\" href=\"#关闭文件\">#</a> 关闭文件</h2>\n<p><code>close</code>  关闭文件对象，即，关闭对文件的占用</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>file_obj<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果不调用  <code>close</code>  ，并且程序没有停止运行，那么这个文件将一直被 Python 程序占用（除  <code>with open</code>  语法外）</p>\n<h2 id=\"读操作\"><a class=\"anchor\" href=\"#读操作\">#</a> 读操作</h2>\n<h3 id=\"read-方法\"><a class=\"anchor\" href=\"#read-方法\">#</a> read 方法</h3>\n<p><code>read</code>  可以读取给定长度的数据</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>file_obj<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>其中，num 表示要从文件中读取的数据的长度（字节数）。如果没有传入 num，表示读取文件中所有的数据</p>\n<h3 id=\"readlines-方法\"><a class=\"anchor\" href=\"#readlines-方法\">#</a> readlines 方法</h3>\n<p><code>readlines</code>  可以一次性读取整个文件中的内容。 <code>readlines</code>  返回的是一个列表，其中，文件每一行的数据对应列表的一个元素</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>file_obj<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"readline-方法\"><a class=\"anchor\" href=\"#readline-方法\">#</a> readline 方法</h3>\n<p><code>readline</code>  一次读取一行数据</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>file_obj<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"for-循环读取文件行\"><a class=\"anchor\" href=\"#for-循环读取文件行\">#</a> for 循环读取文件行</h3>\n<p>可以使用  <code>for</code>  循环遍历读取文件的每一行内容</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 临时变量 line 记录文件的一行数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"with-open-语法\"><a class=\"anchor\" href=\"#with-open-语法\">#</a> with open 语法</h3>\n<p>通过在  <code>with open</code>  的语句块中对文件进行操作，可以在操作完成后自动关闭文件，避免因忘记  <code>close</code>  文件对象而导致文件被占用</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> file_obj<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    file_obj<span class=\"token punctuation\">.</span>readlines<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"文件的写入\"><a class=\"anchor\" href=\"#文件的写入\">#</a> 文件的写入</h1>\n<h2 id=\"打开文件-2\"><a class=\"anchor\" href=\"#打开文件-2\">#</a> 打开文件</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>file_obj <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'UTF-8'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用  <code>'w'</code>  模式时：</p>\n<ul>\n<li>如果文件不存在，会创建新文件</li>\n<li>如果文件存在，会将原有内容清空</li>\n</ul>\n<h2 id=\"写操作\"><a class=\"anchor\" href=\"#写操作\">#</a> 写操作</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>file_obj<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>content</code>  表示需要写入的内容</p>\n<p>注意：调用  <code>write</code>  时，内容并未真正写入文件，而是会积攒在程序的内存中，称之为缓冲区</p>\n<p>当调用  <code>flush</code>  时，内容会真正写入文件</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>file_obj<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p><code>write</code>  写入内容 +  <code>flush</code>  刷新内容到硬盘，这样做是避免因频繁操作硬盘而导致效率下降</p>\n</blockquote>\n<h2 id=\"关闭文件-2\"><a class=\"anchor\" href=\"#关闭文件-2\">#</a> 关闭文件</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>file_obj<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意： <code>close</code>  方法内置了  <code>flush</code>  的功能</p>\n<h1 id=\"文件的追加写入\"><a class=\"anchor\" href=\"#文件的追加写入\">#</a> 文件的追加写入</h1>\n<h2 id=\"打开文件-3\"><a class=\"anchor\" href=\"#打开文件-3\">#</a> 打开文件</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>file_obj <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'UTF-8'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用 'a' 模式时：</p>\n<ul>\n<li>如果文件不存在，会创建文件</li>\n<li>如果文件存在，会在文件最后追加写入</li>\n</ul>\n<h2 id=\"追加写入操作\"><a class=\"anchor\" href=\"#追加写入操作\">#</a> 追加写入操作</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 写入内容 content</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>file_obj<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 刷新内容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>file_obj<span class=\"token punctuation\">.</span>flush<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"关闭文件-3\"><a class=\"anchor\" href=\"#关闭文件-3\">#</a> 关闭文件</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>file_obj<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXFXNHkxYTdmVS8=\">黑马程序员</span></p>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/23926cd4/",
            "url": "https://jiankychen.github.io/posts/23926cd4/",
            "title": "Python 数据容器",
            "date_published": "2022-12-01T11:21:27.000Z",
            "content_html": "<p>数据容器：一种可以容纳多份数据的数据类型，容纳的每一份数据称之为 1 个元素，其中，每一个元素可以是任意类型的数据，如字符串、数字、布尔等</p>\n<p>Python 数据容器可以分为 5 类：</p>\n<ul>\n<li>列表（list）</li>\n<li>元组（tuple）</li>\n<li>字符串（str）</li>\n<li>集合（set）</li>\n<li>字典（dict）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">列表</th>\n<th style=\"text-align:center\">元组</th>\n<th style=\"text-align:center\">字符串</th>\n<th style=\"text-align:center\">集合</th>\n<th style=\"text-align:center\">字典</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">元素类型</td>\n<td style=\"text-align:center\">任意</td>\n<td style=\"text-align:center\">任意</td>\n<td style=\"text-align:center\">字符</td>\n<td style=\"text-align:center\">任意</td>\n<td style=\"text-align:center\">key-value (key: 除字典外任意类型，value: 任意类型)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">下标索引</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据有序</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">重复元素</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">支持</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可修改性</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>在 Python 中，有序是指其中的数据可以通过索引（即下标）进行访问</p>\n</blockquote>\n<h1 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h1>\n<h2 id=\"列表的定义\"><a class=\"anchor\" href=\"#列表的定义\">#</a> 列表的定义</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 字面量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>元素<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 元素<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 定义变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>变量名 <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>元素<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 元素<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#定义空列表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>变量名称 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>变量名称 <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>列表可以同时存储不同的数据类型，并且，列表支持嵌套</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>my_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"iteration\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nested_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nested_list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>nested_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"列表的方法\"><a class=\"anchor\" href=\"#列表的方法\">#</a> 列表的方法</h2>\n<h3 id=\"访问元素\"><a class=\"anchor\" href=\"#访问元素\">#</a> 访问元素</h3>\n<p>可以通过列表的下标索引 idx 获取对应位置的数据</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>value <span class=\"token operator\">=</span> list_name<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>其中，列表的下标索引可以分为两种：</p>\n<ul>\n<li>正向索引（从左往右）：从 0 开始，依次递增</li>\n<li>反向索引（从右往左）：从 -1 开始，依次递减</li>\n</ul>\n<blockquote>\n<p>要注意下标索引的取值范围，超出范围会报错</p>\n</blockquote>\n<h3 id=\"查找元素\"><a class=\"anchor\" href=\"#查找元素\">#</a> 查找元素</h3>\n<p>查找元素 element 在列表 list_name 中的下标（元素在列表中的第一个匹配位置），如果找不到则报错 ValueError</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list_name<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"修改元素\"><a class=\"anchor\" href=\"#修改元素\">#</a> 修改元素</h3>\n<p>修改下标为 idx 的元素的值</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list_name<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value</pre></td></tr></table></figure><h3 id=\"插入元素\"><a class=\"anchor\" href=\"#插入元素\">#</a> 插入元素</h3>\n<p>在下标 idx 处插入元素 element</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list_name<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"追加元素\"><a class=\"anchor\" href=\"#追加元素\">#</a> 追加元素</h3>\n<p><strong>方式一</strong></p>\n<p>将元素 element 追加到列表 list_name 的尾部</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list_name<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"it\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"its\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"itself\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>name_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">\"itheima\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>方式二</strong></p>\n<p>将其他数据容器的内容取出，依次追加到列表 list_name 的尾部</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list_name<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mylist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>temp_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mylist<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>temp_list<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"删除指定位置元素\"><a class=\"anchor\" href=\"#删除指定位置元素\">#</a> 删除指定位置元素</h3>\n<p>删除下标 idx 处的元素</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">del</span> list_name<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list_name<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 该方式可以获取返回值（被删除的元素）</span></pre></td></tr></table></figure><h3 id=\"删除指定元素\"><a class=\"anchor\" href=\"#删除指定元素\">#</a> 删除指定元素</h3>\n<p>删除指定元素值在列表中的第一个匹配项</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list_name<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 删除元素 element 在列表中的第一个匹配项</span></pre></td></tr></table></figure><h3 id=\"清空列表\"><a class=\"anchor\" href=\"#清空列表\">#</a> 清空列表</h3>\n<p>清空列表内容</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list_name<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"统计指定元素数量\"><a class=\"anchor\" href=\"#统计指定元素数量\">#</a> 统计指定元素数量</h3>\n<p>统计元素 element 在列表 list_name 中的数量</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list_name<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h2>\n<h3 id=\"统计列表元素数量\"><a class=\"anchor\" href=\"#统计列表元素数量\">#</a> 统计列表元素数量</h3>\n<p>统计整个列表中的元素总数量</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>list_name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"列表的-while-遍历\"><a class=\"anchor\" href=\"#列表的-while-遍历\">#</a> 列表的 while 遍历</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> idx <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>list_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    statement</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    idx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><h3 id=\"列表的-for-遍历\"><a class=\"anchor\" href=\"#列表的-for-遍历\">#</a> 列表的 for 遍历</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>list_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    statement</pre></td></tr></table></figure><h1 id=\"元组\"><a class=\"anchor\" href=\"#元组\">#</a> 元组</h1>\n<p>元组（tuple）：元组同列表一样，都是一种可以封装多个、不同类型的元素的容器；不同点在于，元素一旦定义完成，就不可以修改</p>\n<h2 id=\"元组的定义\"><a class=\"anchor\" href=\"#元组的定义\">#</a> 元组的定义</h2>\n<p>定义元组：使用小括号包围数据，其中，每个数据之间用逗号隔开（数据可以是不同的数据类型）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 定义元组字面量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>元素<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 元素<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 定义元组变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>变量名称 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>元素<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 元素<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 定义空元组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>变量名称 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>变量名称 <span class=\"token operator\">=</span> <span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：如果元组只有一个数据，需要在这个数据后面添加逗号，否则不是元组类型</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>t4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>元组也支持嵌套</p>\n<p>注意：</p>\n<ul>\n<li>不可以修改元组的内容，否则会直接报错</li>\n<li>如果元组内嵌套了 list 列表，则可以修改 list 列表的内容（修改、增加、删除元素，反转等）</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mytuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"it\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"20221124\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mytuple<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span></pre></td></tr></table></figure><h2 id=\"元组的方法\"><a class=\"anchor\" href=\"#元组的方法\">#</a> 元组的方法</h2>\n<h3 id=\"访问元素-2\"><a class=\"anchor\" href=\"#访问元素-2\">#</a> 访问元素</h3>\n<p>元组支持下标索引</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>element <span class=\"token operator\">=</span> tuple_name<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"查找元素-2\"><a class=\"anchor\" href=\"#查找元素-2\">#</a> 查找元素</h3>\n<p>查找指定元素的第一个匹配项</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple_name<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"统计指定元素数量-2\"><a class=\"anchor\" href=\"#统计指定元素数量-2\">#</a> 统计指定元素数量</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tuple_name<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"其他-2\"><a class=\"anchor\" href=\"#其他-2\">#</a> 其他</h2>\n<h3 id=\"统计元素数量\"><a class=\"anchor\" href=\"#统计元素数量\">#</a> 统计元素数量</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tuple_name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"元组的-while-遍历\"><a class=\"anchor\" href=\"#元组的-while-遍历\">#</a> 元组的 while 遍历</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> idx <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tuple_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    statement</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    idx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><h3 id=\"元组的-for-遍历\"><a class=\"anchor\" href=\"#元组的-for-遍历\">#</a> 元组的 for 遍历</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> element <span class=\"token keyword\">in</span> tuple_name<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    statement</pre></td></tr></table></figure><h1 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h1>\n<p>字符串（str）：字符串是字符的容器，一个字符串可以存放任意数量的字符</p>\n<p>字符串是一个 无法修改 的数据容器</p>\n<h2 id=\"字符串的定义\"><a class=\"anchor\" href=\"#字符串的定义\">#</a> 字符串的定义</h2>\n<p>使用一对双引号包围一系列字符</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str_name <span class=\"token operator\">=</span> <span class=\"token string\">\"Here is the content of string\"</span></pre></td></tr></table></figure><h2 id=\"字符串的方法\"><a class=\"anchor\" href=\"#字符串的方法\">#</a> 字符串的方法</h2>\n<h3 id=\"访问元素-3\"><a class=\"anchor\" href=\"#访问元素-3\">#</a> 访问元素</h3>\n<p>字符串支持下标索引</p>\n<ul>\n<li>从前往后索引：下标从 0 开始</li>\n<li>从后往前索引：下标从 -1 开始</li>\n</ul>\n<h3 id=\"查找子串\"><a class=\"anchor\" href=\"#查找子串\">#</a> 查找子串</h3>\n<p>查找子串 target_str 在字符串 str_name 中的下标索引值</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str_name<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>target_str<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"替换子串\"><a class=\"anchor\" href=\"#替换子串\">#</a> 替换子串</h3>\n<p>将字符串 str_name 内的 str1 全部替换为 str2</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str_name<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意，此方法并不是修改字符串本身（字符串是无法修改的），而是得到了一个新的字符串</p>\n<h3 id=\"分割子串\"><a class=\"anchor\" href=\"#分割子串\">#</a> 分割子串</h3>\n<p>按照指定的分隔符字符串 separator，将字符串划分为多个子字符串并存入列表对象中</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str_name<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意，此方法并不是修改字符串本身，而是得到了一个列表对象</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>my_str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello python itheima and itcast\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>result <span class=\"token operator\">=</span> my_str<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 按照空格进行分割，得到一个列表</span></pre></td></tr></table></figure><h3 id=\"去除前后空格\"><a class=\"anchor\" href=\"#去除前后空格\">#</a> 去除前后空格</h3>\n<p>strip () 方法删除开头和结尾的空白字符</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str_name<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>my_str <span class=\"token operator\">=</span> <span class=\"token string\">\"   itheima and itcast   \"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>new_my_str <span class=\"token operator\">=</span> my_str<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"去除前后指定字符串\"><a class=\"anchor\" href=\"#去除前后指定字符串\">#</a> 去除前后指定字符串</h3>\n<p>通过给 strip () 方法传入参数，可以删除字符串开头和结尾处的指定字符串</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str_name<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span>target_str<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>需要注意，删除操作是按照单个字符进行的</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>my_str <span class=\"token operator\">=</span> <span class=\"token string\">\"12itheima and itcast21\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>new_my_str <span class=\"token operator\">=</span> my_str<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">\"12\"</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 传入的是 \"12\"，此时，\"1\" 和 \"2\" 都会移除，即，按照单个字符移除</span></pre></td></tr></table></figure><h3 id=\"统计指定字符串数量\"><a class=\"anchor\" href=\"#统计指定字符串数量\">#</a> 统计指定字符串数量</h3>\n<p>统计字符串中某子串的出现次数</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>str_name<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span>target_str<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>my_str <span class=\"token operator\">=</span> <span class=\"token string\">\"itheima and itcast\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cnt <span class=\"token operator\">=</span> my_str<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">(</span><span class=\"token string\">'it'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"其他-3\"><a class=\"anchor\" href=\"#其他-3\">#</a> 其他</h2>\n<h3 id=\"统计字符串长度\"><a class=\"anchor\" href=\"#统计字符串长度\">#</a> 统计字符串长度</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>str_name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"字符串的-while-遍历\"><a class=\"anchor\" href=\"#字符串的-while-遍历\">#</a> 字符串的 while 遍历</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> idx <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>str_name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    statement</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    idx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><h3 id=\"字符串的-for-遍历\"><a class=\"anchor\" href=\"#字符串的-for-遍历\">#</a> 字符串的 for 遍历</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> element <span class=\"token keyword\">in</span> str_name<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    statement</pre></td></tr></table></figure><h1 id=\"序列\"><a class=\"anchor\" href=\"#序列\">#</a> 序列</h1>\n<p>序列是指内容连续、有序，并且可使用下标索引的一类数据容器</p>\n<p>序列是字符串、元组、列表的统称</p>\n<p>序列支持切片，即：从序列的指定位置开始，依次取出元素，到指定位置结束，得到一个新序列（该操作不会影响原序列，而是生成了一个新的序列）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sequence<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span>end<span class=\"token punctuation\">:</span>step<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>其中：</p>\n<ul>\n<li>起始下标 start 表示从何处开始，可以省略，省略时视为从头开始</li>\n<li>结束下标 end 表示何处结束（不截取结束下标对应元素），可以省略，省略时视为截取至序列末尾（截取最后一个元素）</li>\n<li>步长 step 表示依次取元素的间隔，步长可以为负数，表示反向取元素（注意，起始下标和结束下标也要反向标记）</li>\n</ul>\n<h1 id=\"集合\"><a class=\"anchor\" href=\"#集合\">#</a> 集合</h1>\n<p>集合（set）：不支持元素重复（自带去重功能），并且内容无序</p>\n<p>集合是无序的，不支持下标索引访问</p>\n<p>集合是可以修改的</p>\n<h2 id=\"集合的定义\"><a class=\"anchor\" href=\"#集合的定义\">#</a> 集合的定义</h2>\n<p>定义集合：使用大括号包围数据，其中，每个数据之间用逗号隔开</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 定义集合字面量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>元素<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 元素<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 定义集合变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>变量名称 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>元素<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 元素<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 定义空集合</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>变量名称 <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"集合的方法\"><a class=\"anchor\" href=\"#集合的方法\">#</a> 集合的方法</h2>\n<h3 id=\"添加元素\"><a class=\"anchor\" href=\"#添加元素\">#</a> 添加元素</h3>\n<p>将指定元素添加到集合内</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set_name<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"删除元素\"><a class=\"anchor\" href=\"#删除元素\">#</a> 删除元素</h3>\n<p>将指定元素从集合内移除</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set_name<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"随机取出元素\"><a class=\"anchor\" href=\"#随机取出元素\">#</a> 随机取出元素</h3>\n<p>从集合中随机取出一个元素（集合本身被修改，元素被移除）</p>\n<p>该操作可以具有返回值</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>element <span class=\"token operator\">=</span> set_name<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"清空集合\"><a class=\"anchor\" href=\"#清空集合\">#</a> 清空集合</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set_name<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"取两集合的差集\"><a class=\"anchor\" href=\"#取两集合的差集\">#</a> 取两集合的差集</h3>\n<p>取出集合 1 与集合 2 的差集：元素在集合 1 中、但不在集合 2 中</p>\n<p>该操作得到一个新集合，集合 1 和集合 2 保持不变</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>new_set <span class=\"token operator\">=</span> set1<span class=\"token punctuation\">.</span>difference<span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"消除两集合的差集\"><a class=\"anchor\" href=\"#消除两集合的差集\">#</a> 消除两集合的差集</h3>\n<p>消除集合 1 与集合 2 的差集：对比集合 1 和集合 2，在集合 1 内，删除与集合 2 相同的元素</p>\n<p>该操作修改了集合 2，集合 2 保持不变</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set1<span class=\"token punctuation\">.</span>difference_update<span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"合并两集合\"><a class=\"anchor\" href=\"#合并两集合\">#</a> 合并两集合</h3>\n<p>合并 2 个集合：将集合 1 与集合 2 组成新集合</p>\n<p>该操作得到一个新集合，集合 1 与集合 2 保持不变</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>new_set <span class=\"token operator\">=</span> set1<span class=\"token punctuation\">.</span>union<span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"其他-4\"><a class=\"anchor\" href=\"#其他-4\">#</a> 其他</h2>\n<h3 id=\"统计集合元素数量\"><a class=\"anchor\" href=\"#统计集合元素数量\">#</a> 统计集合元素数量</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>set_name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"集合的遍历\"><a class=\"anchor\" href=\"#集合的遍历\">#</a> 集合的遍历</h3>\n<p>集合不支持下标索引，不能使用 while 循环遍历</p>\n<p>集合可以使用 for 循环遍历</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> element <span class=\"token keyword\">in</span> set_name</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    statement</pre></td></tr></table></figure><h1 id=\"字典\"><a class=\"anchor\" href=\"#字典\">#</a> 字典</h1>\n<p>字典（dict）：存储键值对（即，key-value 对），可以提供基于 key 检索 value 的场景实现</p>\n<p>字典不支持重复的 key ，重复添加等同于覆盖原有数据</p>\n<h2 id=\"字典的定义\"><a class=\"anchor\" href=\"#字典的定义\">#</a> 字典的定义</h2>\n<p>使用大括号 {} 包围元素，其中，每一个元素都是一个键值对（key: value），元素之间用逗号隔开</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 定义字典字面量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 定义字典变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>变量名称 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 定义空字典</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>变量名称 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>变量名称 <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>字典的 key 和 value 可以是任意数据类型（key 不可为字典）</p>\n<p>因此可以将 字典 2 作为 字典 1 的 value ，实现字典的嵌套</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>score_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">\"小红\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"语文\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"数学\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">66</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"英语\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"语文\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">88</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"数学\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">86</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"英语\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">55</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">\"小花\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"语文\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"数学\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"英语\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">66</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"score_dict 的内容为：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>score_dict<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">，类型为：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>score_dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"小红的语文成绩为：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>score_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'语文'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"小明的数学成绩为：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>score_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'数学'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"小花的英语成绩为：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>score_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'小花'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'英语'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"字典的方法\"><a class=\"anchor\" href=\"#字典的方法\">#</a> 字典的方法</h2>\n<h3 id=\"访问元素-4\"><a class=\"anchor\" href=\"#访问元素-4\">#</a> 访问元素</h3>\n<p>字典同集合一样，不支持下标索引。但是，字典可以通过 key 来获取对应的 value</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>value <span class=\"token operator\">=</span> dict_name<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"添加更新元素\"><a class=\"anchor\" href=\"#添加更新元素\">#</a> 添加 / 更新元素</h3>\n<p>新增元素 / 更新元素：如果 key 不存在，则新增元素；如果 key 存在，则更新元素（更新 value 值）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dict_name<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value</pre></td></tr></table></figure><h3 id=\"删除元素-2\"><a class=\"anchor\" href=\"#删除元素-2\">#</a> 删除元素</h3>\n<p>将 key 所在键值对从字典中删除</p>\n<p>该操作具有返回值，可以获取 key 所对应的 value</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>value <span class=\"token operator\">=</span> dict_name<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"清空字典\"><a class=\"anchor\" href=\"#清空字典\">#</a> 清空字典</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>dict_name<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"获取-key-列表\"><a class=\"anchor\" href=\"#获取-key-列表\">#</a> 获取 key 列表</h3>\n<p>获取全部的 key</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>keys <span class=\"token operator\">=</span> dict_name<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>my_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>keys <span class=\"token operator\">=</span> my_dict<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"通过 keys 方法获取全部的 key ，结果为：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>keys<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> ，其数据类型为：</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"其他-5\"><a class=\"anchor\" href=\"#其他-5\">#</a> 其他</h2>\n<h3 id=\"统计元素数量-2\"><a class=\"anchor\" href=\"#统计元素数量-2\">#</a> 统计元素数量</h3>\n<p>统计字典的元素数量（一个键值对视为一个元素）</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>dict_name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"字典的遍历\"><a class=\"anchor\" href=\"#字典的遍历\">#</a> 字典的遍历</h3>\n<p>方式 1：获取全部的 key ，从而实现遍历</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>keys <span class=\"token operator\">=</span> dict_name<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> keys<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    statement</pre></td></tr></table></figure><p>方式 2：直接对字典进行 for 循环遍历，每次循环都是直接得到 key</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> dict_name<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    statement</pre></td></tr></table></figure><h1 id=\"数据容器的通用操作\"><a class=\"anchor\" href=\"#数据容器的通用操作\">#</a> 数据容器的通用操作</h1>\n<h2 id=\"统计元素数量-3\"><a class=\"anchor\" href=\"#统计元素数量-3\">#</a> 统计元素数量</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>数据容器<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"获取最大元素\"><a class=\"anchor\" href=\"#获取最大元素\">#</a> 获取最大元素</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>数据容器<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"获取最小元素\"><a class=\"anchor\" href=\"#获取最小元素\">#</a> 获取最小元素</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>数据容器<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"类型转换\"><a class=\"anchor\" href=\"#类型转换\">#</a> 类型转换</h2>\n<h3 id=\"转为列表\"><a class=\"anchor\" href=\"#转为列表\">#</a> 转为列表</h3>\n<p>将给定容器转换为列表</p>\n<ul>\n<li>若原容器为字符串，则将字符串中的每个字符分别作为列表的一个元素</li>\n<li>若原容器为字典，则将字典的每个 key 分别作为列表的一个元素（value 被舍弃）</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>数据容器<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"转为元组\"><a class=\"anchor\" href=\"#转为元组\">#</a> 转为元组</h3>\n<p>将给定容器转换为元组</p>\n<ul>\n<li>若原容器为字符串，则将字符串中的每个字符分别作为元组的一个元素</li>\n<li>若原容器为字典，则将字典的每个 key 分别作为元组的一个元素（value 被舍弃）</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>数据容器<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"转为字符串\"><a class=\"anchor\" href=\"#转为字符串\">#</a> 转为字符串</h3>\n<p>将给定容器转换为字符串：整个容器（包括容器的组成括号）均被转换为字符串</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>数据容器<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mylist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mytuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>myset <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mydict <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>str1 <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>mylist<span class=\"token punctuation\">)</span>      <span class=\"token comment\"># '[1, 2, 3, 4]'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>mytuple<span class=\"token punctuation\">)</span>     <span class=\"token comment\"># '(1, 2, 3, 4, 5)'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>str3 <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>myset<span class=\"token punctuation\">)</span>       <span class=\"token comment\"># '&#123;2, 3, 4, 5&#125;'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>str4 <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>mydict<span class=\"token punctuation\">)</span>      <span class=\"token comment\"># \"&#123;'a': 1, 'b': 2&#125;\"</span></pre></td></tr></table></figure><h3 id=\"转为集合\"><a class=\"anchor\" href=\"#转为集合\">#</a> 转为集合</h3>\n<p>将给定容器转换为集合</p>\n<ul>\n<li>若原容器为字典，则将字典的每个 key 分别作为集合的一个元素（value 被舍弃）</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>数据容器<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>转换为集合后，原容器的数据有序性将不再保持</p>\n</blockquote>\n<h2 id=\"排序\"><a class=\"anchor\" href=\"#排序\">#</a> 排序</h2>\n<p>将给定容器进行排序：</p>\n<ul>\n<li>排序的结果为列表对象（即，将给定容器的内容进行排序，并将结果放入列表中）</li>\n</ul>\n<p>按升序排序（默认按照升序排序）：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>容器<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>按降序排序：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>容器<span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXFXNHkxYTdmVS8=\">黑马程序员</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3B5dGhvbi9pbmRleC5hc3A=\">W3school</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9weXRob24zL3B5dGhvbjMtdHV0b3JpYWwuaHRtbA==\">菜鸟教程</span></li>\n</ul>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/2bc936a0/",
            "url": "https://jiankychen.github.io/posts/2bc936a0/",
            "title": "Python 基本语法",
            "date_published": "2022-11-30T08:09:05.000Z",
            "content_html": "<h1 id=\"条件语句\"><a class=\"anchor\" href=\"#条件语句\">#</a> 条件语句</h1>\n<h2 id=\"if\"><a class=\"anchor\" href=\"#if\">#</a> if</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    statement</pre></td></tr></table></figure><h2 id=\"if-else\"><a class=\"anchor\" href=\"#if-else\">#</a> if - else</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    statement1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    statement2</pre></td></tr></table></figure><h2 id=\"if-eles-if-else\"><a class=\"anchor\" href=\"#if-eles-if-else\">#</a> if - eles if - else</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> condition1<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    statement1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">elif</span> condition2<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    statement2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    statement3</pre></td></tr></table></figure><h1 id=\"循环语句\"><a class=\"anchor\" href=\"#循环语句\">#</a> 循环语句</h1>\n<h2 id=\"while\"><a class=\"anchor\" href=\"#while\">#</a> while</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> condition<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    statement</pre></td></tr></table></figure><h2 id=\"for\"><a class=\"anchor\" href=\"#for\">#</a> for</h2>\n<p>for 循环无法定义循环条件，只能从 序列 中取出数据处理</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> sequence<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    statement</pre></td></tr></table></figure><h2 id=\"range\"><a class=\"anchor\" href=\"#range\">#</a> range</h2>\n<p>range 语句：产生一个序列</p>\n<ul>\n<li><code>range(num)</code> : 从 0 开始、到 num 结束（不包含 num 本身）</li>\n<li><code>range(num1, num2)</code> : 从 num1 开始、到 num2 结束（不包含 num2 本身）</li>\n<li><code>range(num1, num2, step)</code> : 从 num1 开始、到 num2 结束（不包含 num2 本身），步长为 step</li>\n</ul>\n<h2 id=\"continue\"><a class=\"anchor\" href=\"#continue\">#</a> continue</h2>\n<p>continue: 中断本次循环，直接进入下一次循环</p>\n<p>continue 可用于 while 和 for 循环</p>\n<h2 id=\"break\"><a class=\"anchor\" href=\"#break\">#</a> break</h2>\n<p>break: 直接结束循环</p>\n<p>break 可用于 while 和 for 循环</p>\n<h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<p>函数的定义：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    statement</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> results</pre></td></tr></table></figure><p><strong>函数必须先定义后使用</strong></p>\n<h2 id=\"函数的返回值\"><a class=\"anchor\" href=\"#函数的返回值\">#</a> 函数的返回值</h2>\n<p>如果函数没有 return 语句，将默认返回 None</p>\n<blockquote>\n<p>None 可用于声明无初始内容的变量，并且，None 可用于 if 判断</p>\n</blockquote>\n<p>如果函数有多个返回值，则将多个返回值（用逗号分隔）同时放在一个 return 语句中</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    quotient <span class=\"token operator\">=</span> x <span class=\"token operator\">//</span> y</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    remainder <span class=\"token operator\">=</span> x <span class=\"token operator\">%</span> y</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> quotient<span class=\"token punctuation\">,</span> remainder</pre></td></tr></table></figure><h2 id=\"传参方式\"><a class=\"anchor\" href=\"#传参方式\">#</a> 传参方式</h2>\n<h3 id=\"位置参数\"><a class=\"anchor\" href=\"#位置参数\">#</a> 位置参数</h3>\n<p>调用函数时根据函数定义的参数位置来传递参数</p>\n<p>注意：实参的顺序及个数必须与形参列表保持一致</p>\n<h3 id=\"关键字参数\"><a class=\"anchor\" href=\"#关键字参数\">#</a> 关键字参数</h3>\n<p>函数调用时通过 “key=value” 形式传递参数</p>\n<p>可以让函数更见清晰，同时也消除了参数的顺序需求（关键字参数之间不存在先后顺序）</p>\n<p>注意：在调用函数时，如果混用位置参数与关键字参数，必须将位置参数放在关键字参数的前面</p>\n<h3 id=\"缺省参数默认参数\"><a class=\"anchor\" href=\"#缺省参数默认参数\">#</a> 缺省参数（默认参数）</h3>\n<p>定义函数时，如果为参数提供默认值，则在调用函数时可以不传递该默认参数的值</p>\n<p>在调用函数时，如果为缺省参数传递值则修改默认参数值，否则，使用默认值</p>\n<p>注意：无论是定义函数或者调用函数，所有位置参数都必须出现在默认参数之前</p>\n<h3 id=\"不定长参数可变参数\"><a class=\"anchor\" href=\"#不定长参数可变参数\">#</a> 不定长参数（可变参数）</h3>\n<p>不定长参数用于不确定实参数量（不传参也可以）的场景</p>\n<p>不定长参数的类型：</p>\n<ul>\n<li>位置传递</li>\n<li>关键字传递</li>\n</ul>\n<h4 id=\"位置不定长\"><a class=\"anchor\" href=\"#位置不定长\">#</a> 位置不定长</h4>\n<p>位置不定长传递以 * 号标记一个形式参数，以元组的形式接收传入的实参，形式参数一般命名为 args</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">user_info</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># ('TOM',)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>user_info<span class=\"token punctuation\">(</span><span class=\"token string\">'TOM'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># ('TOM', 18)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>user_info<span class=\"token punctuation\">(</span><span class=\"token string\">'TOM'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"关键字不定长\"><a class=\"anchor\" href=\"#关键字不定长\">#</a> 关键字不定长</h4>\n<p>关键字不定长传递以 ** 号标记一个形式参数，以字典的形式接收传入的实参，形式参数一般命名为 kwargs</p>\n<p>传递的所有实参均为 &quot;key=value&quot; 形式</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">user_info</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># ('name': 'TOM', 'age': 18, 'id': 198)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>user_info<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'TOM'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token number\">198</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"函数作为参数传递\"><a class=\"anchor\" href=\"#函数作为参数传递\">#</a> 函数作为参数传递</h2>\n<p>函数本身是可以作为参数传入到另一个函数中使用的</p>\n<p>将函数作为参数的作用：传入的是计算逻辑，而不是计算数据</p>\n<h2 id=\"lambda-匿名函数\"><a class=\"anchor\" href=\"#lambda-匿名函数\">#</a> lambda 匿名函数</h2>\n<p>函数的两种定义方式：</p>\n<ul>\n<li><code>def</code>  关键字可以定义带有名称的函数，该函数可以重复使用</li>\n<li><code>lambda</code>  关键字可以定义匿名函数（无名称），该函数只可临时使用一次</li>\n</ul>\n<p>匿名函数的定义：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">lambda</span> 传入参数<span class=\"token punctuation\">:</span> 函数体</pre></td></tr></table></figure><p>其中：</p>\n<ul>\n<li><code>lambda</code>  是关键字，表示定义匿名函数</li>\n<li>传入参数表示匿名函数的形式参数（可以传入多个参数）</li>\n<li>函数体只能写一行，无法写多行代码</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># compute 函数作为参数传入 test_func 函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">test_func</span><span class=\"token punctuation\">(</span>compute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    result <span class=\"token operator\">=</span> compute<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 通过 def 定义 compute 函数并传入</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>test_func<span class=\"token punctuation\">(</span>compute<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 结果：3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 通过 lambda 关键字定义匿名函数并传入</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>test_func<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 结果：3</span></pre></td></tr></table></figure><h1 id=\"局部变量与全局变量\"><a class=\"anchor\" href=\"#局部变量与全局变量\">#</a> 局部变量与全局变量</h1>\n<p>局部变量：定义在函数体内部的变量，只在函数体内部生效</p>\n<p>全局变量：在函数体内、外都能生效的变量</p>\n<p>在函数内无法修改全局变量</p>\n<blockquote>\n<p>如果尝试在函数内部修改全局变量，实际上是定义了一个与全局变量同名的局部变量</p>\n</blockquote>\n<p>使用 global 关键字，可以在函数内部声明变量为全局变量</p>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXFXNHkxYTdmVS8=\">黑马程序员</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3B5dGhvbi9pbmRleC5hc3A=\">W3school</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9weXRob24zL3B5dGhvbjMtdHV0b3JpYWwuaHRtbA==\">菜鸟教程</span></li>\n</ul>\n",
            "tags": [
                "Python"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/cf6d2393/",
            "url": "https://jiankychen.github.io/posts/cf6d2393/",
            "title": "LeetCode 227. 基本计算器 II",
            "date_published": "2022-11-06T13:15:33.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9iYXNpYy1jYWxjdWxhdG9yLWlpL2Rlc2NyaXB0aW9uLw==\">227. 基本计算器 II</span></p>\n<p>给你一个字符串表达式  <code>s</code>  ，请你实现一个基本计算器来计算并返回它的值</p>\n<p>整数除法仅保留整数部分</p>\n<p>你可以假设给定的表达式总是有效的。所有中间结果将在 [-2<sup>31</sup>, 2<sup>31</sup> - 1] 的范围内</p>\n<p>注意：不允许使用任何将字符串作为数学表达式计算的内置函数（例如  <code>eval()</code>  ）</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入：s = &quot;3+2*2&quot;\n输出：7\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：s = &quot; 3/2 &quot;\n输出：1\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：s = &quot; 3+5 / 2 &quot;\n输出：5\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></li>\n<li>s 由整数和算符 ( <code>'+'</code> ,  <code>'-'</code> ,  <code>'*'</code> ,  <code>'/'</code> ) 组成，中间由一些 <strong>空格</strong> 隔开</li>\n<li>s 表示一个 <strong>有效表达式</strong></li>\n<li>表达式中的所有整数都是非负整数，且在范围 [0, 2<sup>31</sup> - 1] 内</li>\n<li>题目数据保证答案是一个 <strong>32-bit 整数</strong></li>\n</ul>\n<h1 id=\"method-栈\"><a class=\"anchor\" href=\"#method-栈\">#</a> Method: 栈</h1>\n<h2 id=\"算法思路\"><a class=\"anchor\" href=\"#算法思路\">#</a> 算法思路</h2>\n<p>由于乘除优先于加减计算，可以先进行所有乘除运算，并将这些乘除运算的结果放回原表达式的相应位置，最终，整个表达式的结果就等于一系列整数加减后的值</p>\n<p>因此，可以用一个栈保存这些（进行乘除运算后的）整数的值</p>\n<ul>\n<li>对于  <code>'+'</code>  后面的数字，将其直接压入栈中</li>\n<li>对于  <code>'-'</code>  后面的数组，将其相反数压入栈中</li>\n<li>对于  <code>'*'</code>  或  <code>'/'</code>  后面的数字，可直接将其与栈顶元素计算，并使用计算结果替换栈顶元素</li>\n</ul>\n<p>最后将栈中元素进行累加，即可得到字符串表达式的值</p>\n<h2 id=\"算法流程\"><a class=\"anchor\" href=\"#算法流程\">#</a> 算法流程</h2>\n<p>定义  <code>num</code>  为当前处理的整数</p>\n<p>定义变量  <code>sign</code>  为整数之前的运算符（将第一个数字之前的运算符视为加号）</p>\n<p>遍历字符串  <code>s</code></p>\n<ul>\n<li>若当前字符  <code>s[i]</code>  为数字字符，则更新当前整数值  <code>num</code>  ： <code>num = num * 10 + (s[i] - '0')</code></li>\n<li>若当前字符  <code>s[i]</code>  为运算符或者字符串最后一个字符，则说明已经遍历到了整数  <code>num</code>  的末尾，此时需根据整数  <code>num</code>  之前的运算符  <code>sign</code>  对  <code>num</code>  进行处理：\n<ul>\n<li>若  <code>sign</code>  为  <code>'+'</code>  ：将  <code>num</code>  压入栈；</li>\n<li>若  <code>sign</code>  为  <code>'-'</code>  ：将  <code>- num</code>  压入栈；</li>\n<li>若  <code>sign</code>  为  <code>'*'</code>  或  <code>'/'</code>  ：将其与栈顶元素计算，并将栈顶元素替换为计算结果</li>\n</ul>\n</li>\n<li>待处理  <code>num</code>  后，更新  <code>sign</code>  为当前遍历到的运算符</li>\n</ul>\n<p>最后，将栈中元素进行累加</p>\n<blockquote>\n<p>这里可以用  <code>vector</code>  数组模拟栈，以便最后计算栈中元素之和</p>\n</blockquote>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> stk<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 模拟栈</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 当前处理的整数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> sign <span class=\"token operator\">=</span> <span class=\"token char\">'+'</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 整数前面的运算符</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 遇到数字字符，计算对应的整数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            num <span class=\"token operator\">=</span> num <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 遇到算术符或者字符串末尾，执行算术运算</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sign <span class=\"token operator\">==</span> <span class=\"token char\">'+'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                stk<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sign <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                stk<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sign <span class=\"token operator\">==</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                stk<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sign <span class=\"token operator\">==</span> <span class=\"token char\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                stk<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            sign <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新 sign 为当前遍历到的运算符</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 重置整数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tmp <span class=\"token operator\">:</span> stk<span class=\"token punctuation\">)</span> ans <span class=\"token operator\">+=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"复杂度分析\"><a class=\"anchor\" href=\"#复杂度分析\">#</a> 复杂度分析</h2>\n<p>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，其中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 为字符串长度</p>\n<p>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9iYXNpYy1jYWxjdWxhdG9yLWlpL3NvbHV0aW9ucy82NDg2NDcvamktYmVuLWppLXN1YW4tcWktaWktYnktbGVldGNvZGUtc29sdXRpby1jbTI4Lw==\">力扣官方题解</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9iYXNpYy1jYWxjdWxhdG9yLWlpL3NvbHV0aW9ucy82NDg4MzIvc2hpLXlvbmctc2h1YW5nLXpoYW4tamllLWp1ZS1qaXUtamktYmlhby1jNjVrLw==\">宫水三叶：双栈解法</span></li>\n</ul>\n",
            "tags": [
                "Coding",
                "栈"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/a1960852/",
            "url": "https://jiankychen.github.io/posts/a1960852/",
            "title": "LeetCode 1296. 划分数组为连续数字的集合",
            "date_published": "2022-11-06T12:29:11.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kaXZpZGUtYXJyYXktaW4tc2V0cy1vZi1rLWNvbnNlY3V0aXZlLW51bWJlcnMvZGVzY3JpcHRpb24v\">1296. 划分数组为连续数字的集合</span></p>\n<p>给你一个整数数组  <code>nums</code>  和一个正整数  <code>k</code> ，请你判断是否可以把这个数组划分成一些由  <code>k</code>  个连续数字组成的集合</p>\n<p>如果可以，请返回  <code>true</code> ；否则，返回  <code>false</code></p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入：nums = [1,2,3,3,4,4,5,6], k = 4\n输出：true\n解释：数组可以分成 [1,2,3,4] 和 [3,4,5,6]\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3\n输出：true\n解释：数组可以分成 [1,2,3] , [2,3,4] , [3,4,5] 和 [9,10,11]\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：nums = [3,3,2,2,1,1], k = 3\n输出：true\n</code></pre>\n<p><strong>示例 4：</strong></p>\n<pre><code>输入：nums = [1,2,3,4], k = 3\n输出：false\n解释：数组不能分成几个大小为 3 的子数组。\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></li>\n<li>1 &lt;= nums[i] &lt;= 10<sup>9</sup></li>\n</ul>\n<h1 id=\"method-排序-哈希\"><a class=\"anchor\" href=\"#method-排序-哈希\">#</a> Method: 排序 + 哈希</h1>\n<h2 id=\"算法思路\"><a class=\"anchor\" href=\"#算法思路\">#</a> 算法思路</h2>\n<p>题目要求将数组划分成若干个集合，其中，每个集合包含 k 个连续数字</p>\n<p>可以从尚未分组的元素中找出值最小的元素，将其作为集合的第一个元素（记作 x ），于是该集合中数字的范围应为 [x, x + k - 1] 。如果某个数字不存在，则无法将数组划分成符合条件的集合，返回 false</p>\n<p>将 [x, x + k - 1] 这 k 个元素划分到一个集合之后，继续对数组中剩余的数字进行分组，直到 所有元素均已分组 或者 遇到无法分组的情况</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">isPossibleDivide</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> k<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 数组长度无法被 k 整除，返回 false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 将数组按从小到大排序</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> hashmap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>hashmap<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 统计每个数字的出现次数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 一共有 nums.size () /k 个集合</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 集合中第一个元素的下标</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> hashmap<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 寻找未被使用的、值最小的元素</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token operator\">++</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">--</span>hashmap<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 将 nums [first] 添加到集合（可用次数减 1 ）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>           <span class=\"token comment\">// 寻找剩余的 k - 1 个元素</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashmap<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 不存在 nums [first] + j 这个数，数字不连续，返回 false</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">else</span>                                <span class=\"token comment\">// 存在 nums [first] + j 这个数，将其可用次数减 1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token operator\">--</span>hashmap<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"复杂度分析\"><a class=\"anchor\" href=\"#复杂度分析\">#</a> 复杂度分析</h2>\n<p>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\log{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span><span class=\"mclose\">)</span></span></span></span>，其中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 为数组的长度</p>\n<p>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，考虑哈希表所需空间</p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kaXZpZGUtYXJyYXktaW4tc2V0cy1vZi1rLWNvbnNlY3V0aXZlLW51bWJlcnMvc29sdXRpb25zLzEwMTgwOS9odWEtZmVuLXNodS16dS13ZWktbGlhbi14dS1zaHUtemktZGUtamktaGUtYnktbGUtMi8=\">力扣官方题解</span></p>\n",
            "tags": [
                "Coding",
                "哈希表",
                "贪心"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/f9f1bc1c/",
            "url": "https://jiankychen.github.io/posts/f9f1bc1c/",
            "title": "LeetCode 554. 砖墙",
            "date_published": "2022-10-28T15:19:39.000Z",
            "content_html": "<p>你的面前有一堵矩形的、由  <code>n</code>  行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和相等</p>\n<p>你现在要画一条 <strong>自顶向下</strong> 的、穿过 <strong>最少</strong> 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。<strong>你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的</strong></p>\n<p>给你一个二维数组  <code>wall</code>  ，该数组包含这堵墙的相关信息。其中， <code>wall[i]</code>  是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 <strong>穿过的砖块数量最少</strong> ，并且返回 <strong>穿过的砖块数量</strong></p>\n<p><img data-src=\"/posts/f9f1bc1c/Example.jpg\" class=\"\"></p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入：wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\n输出：2\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：wall = [[1],[1],[1]]\n输出：3\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>n == wall.length</li>\n<li>1 &lt;= n &lt;= 10<sup>4</sup></li>\n<li>1 &lt;= wall[i].length &lt;= 10<sup>4</sup></li>\n<li>1 &lt;= sum(wall[i].length) &lt;= 2 * 10<sup>4</sup></li>\n<li>对于每一行 i ，sum (wall [i]) 是相同的</li>\n<li>1 &lt;= wall[i][j] &lt;= 231 - 1</li>\n</ul>\n<h1 id=\"method-哈希\"><a class=\"anchor\" href=\"#method-哈希\">#</a> Method: 哈希</h1>\n<h2 id=\"算法思路\"><a class=\"anchor\" href=\"#算法思路\">#</a> 算法思路</h2>\n<p>穿过最少的砖块 等价于 穿过最多的间隙</p>\n<p>可以使用哈希表记录每个间隙的出现次数（以间隙索引位置为 key ，以间隙出现次数为 value），然后从所有行中找出间隙最大出现次数，利用 <strong>行数 减去 间隙出现最大次数 即为 穿过砖块最小数</strong></p>\n<p>其中，每一行中的间隙的索引 需要按 <strong>前缀和</strong> 方法求得，例如，第一行的第一个间隙的索引为  <code>wall[0][0]</code>  ，第二个间隙的索引为  <code>wall[0][0] + wall[0][1]</code>  ，第 i 个间隙的索引为  <code>wall[0][0] + ... + wall[0][i]</code></p>\n<p>注意：不能沿着砖墙两侧的最边缘画线，因此不需要统计砖墙两侧的间隙</p>\n<p>如下图所示，间隙 4 在所有行中出现次数最多，出现次数为 4 次，而总行数为 6 ，因此穿过砖块数为 2</p>\n<p height=\"150px\"><img data-src=\"/posts/f9f1bc1c/Flow.png\" class=\"\"></p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">leastBricks</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> wall<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> wall<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> wall<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 不能沿着最边缘画线</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            sum <span class=\"token operator\">+=</span> wall<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                         <span class=\"token comment\">// 间隙的索引</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token operator\">++</span>hash<span class=\"token punctuation\">[</span>sum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> maxCnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">:</span> hash<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        maxCnt <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxCnt<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> wall<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> maxCnt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"复杂度分析\"><a class=\"anchor\" href=\"#复杂度分析\">#</a> 复杂度分析</h2>\n<p>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 为砖块总个数</p>\n<p>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9icmljay13YWxsL3NvbHV0aW9uL2dvbmctc2h1aS1zYW4teGllLXpoZW5nLW5hbi16ZS1mYW4tc2hpLXktZ3NyaS8=\">宫水三叶：使用哈希表求解</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9icmljay13YWxsL3NvbHV0aW9uL3podWFuLXFpYW5nLWJ5LWxlZXRjb2RlLXNvbHV0aW9uLTJrbHMv\">力扣官方题解</span></li>\n</ul>\n",
            "tags": [
                "Coding",
                "哈希表"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/a8ab548b/",
            "url": "https://jiankychen.github.io/posts/a8ab548b/",
            "title": "LeetCode 463. 岛屿的周长",
            "date_published": "2022-10-28T12:35:22.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9pc2xhbmQtcGVyaW1ldGVyLw==\">LeetCode 463</span></p>\n<p>给定一个  <code>row x col</code>  的二维网格地图  <code>grid</code>  ，其中： <code>grid[i][j] = 1</code>  表示陆地， <code>grid[i][j] = 0</code>  表示水域</p>\n<p>网格中的格子 <strong>水平</strong> 和 <strong>垂直</strong> 方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）</p>\n<p>岛屿中没有 “湖”（“湖” 是指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"/posts/a8ab548b/Example1.png\" class=\"\"></p>\n<pre><code>输入：grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\n输出：16\n解释：它的周长是上面图片中的 16 个黄色的边\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：grid = [[1]]\n输出：4\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：grid = [[1,0]]\n输出：4\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>row == grid.length</code></li>\n<li><code>col == grid[i].length</code></li>\n<li><code>1 &lt;= row, col &lt;= 100</code></li>\n<li><code>grid[i][j]</code>  为  <code>0</code>  或  <code>1</code></li>\n</ul>\n<h1 id=\"method-1-模拟\"><a class=\"anchor\" href=\"#method-1-模拟\">#</a> Method 1: 模拟</h1>\n<h2 id=\"算法思路\"><a class=\"anchor\" href=\"#算法思路\">#</a> 算法思路</h2>\n<p>对于一个岛屿格子的每条边：如果这条边为网格的边界，或者这条边是岛屿与水域的分界线，则需将这条边计入岛屿的周长</p>\n<p>因此，可以遍历每个岛屿格子，看其四个方向的边是否为网格边界或水域分界线，如果是，则计入岛屿周长</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">islandPerimeter</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> dir <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> dir<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> dir<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">==</span> m <span class=\"token operator\">||</span> y <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>res<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 网格边界</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>res<span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 水域分界线</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"复杂度分析\"><a class=\"anchor\" href=\"#复杂度分析\">#</a> 复杂度分析</h2>\n<p>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>×</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(m \\times n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，其中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 分别为网格的行数和列数</p>\n<p>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n<h1 id=\"method-2-深度优先搜索\"><a class=\"anchor\" href=\"#method-2-深度优先搜索\">#</a> Method 2: 深度优先搜索</h1>\n<h2 id=\"算法思路-2\"><a class=\"anchor\" href=\"#算法思路-2\">#</a> 算法思路</h2>\n<p>可以将方法一改成深度优先搜索遍历的方式（该方式可以拓展至多个岛屿情形）</p>\n<p>其中，为避免岛屿格子被重复遍历，需要将已经遍历过的岛屿格子标记。特别地，可以将已经遍历过的岛屿格子的值置为 -1 （不能置为 0，因为置 0 会形成新的 “水域边界线”，进而导致结果出错）</p>\n<h2 id=\"代码实现-2\"><a class=\"anchor\" href=\"#代码实现-2\">#</a> 代码实现</h2>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> dir <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> grid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">==</span> m <span class=\"token operator\">||</span> y <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    grid<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> newx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dir<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> newy <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dir<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        count <span class=\"token operator\">+=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> newx<span class=\"token punctuation\">,</span> newy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">islandPerimeter</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                ans <span class=\"token operator\">+=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"复杂度分析-2\"><a class=\"anchor\" href=\"#复杂度分析-2\">#</a> 复杂度分析</h2>\n<p>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>×</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(m \\times n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，其中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 分别为网格的行数和列数</p>\n<p>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>×</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(m \\times n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9pc2xhbmQtcGVyaW1ldGVyL3NvbHV0aW9uL2Rhby15dS1kZS16aG91LWNoYW5nLWJ5LWxlZXRjb2RlLXNvbHV0aW9uLw==\">力扣官方题解</span></p>\n",
            "tags": [
                "Coding",
                "模拟"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/760f37e5/",
            "url": "https://jiankychen.github.io/posts/760f37e5/",
            "title": "访问控制与封装",
            "date_published": "2022-10-26T07:43:26.000Z",
            "content_html": "<p>在 C++ 语言中，我们使用 <strong>访问说明符</strong>（access specifiers）加强类的封装性：</p>\n<ul>\n<li>\n<p>定义在 <strong> <code>public</code> </strong> 说明符之后的成员可以在整个程序内被访问。 <code>public</code>  成员定义类的接口</p>\n</li>\n<li>\n<p>定义在 <strong> <code>private</code> </strong> 说明符之后的成员可以被类的成员函数访问，但是不能被使用该类的代码访问。 <code>private</code>  封装（即，隐藏）类的实现细节</p>\n</li>\n</ul>\n<p>一个类可以包含 0 个或多个访问说明符，而且，某个访问说明符可以出现多次</p>\n<p>每个访问说明符指定了接下来的成员的访问级别，其有效范围直到出现下一个访问说明符或者到达类的结尾处为止</p>\n<p>再一次定义 Sales_data 类，其新形式如下所示：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sales_data</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span>            <span class=\"token comment\">// 添加了访问说明符</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>               <span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">units_sold</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">revenue</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> bookNo<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Sales_data <span class=\"token operator\">&amp;</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span>            <span class=\"token comment\">// 添加了访问说明符</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">double</span> <span class=\"token function\">avg_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> units_sold <span class=\"token operator\">?</span> revenue<span class=\"token operator\">/</span>units_sold <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string bookNo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> units_sold <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">double</span> revenue <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>作为接口的一部分，构造函数和部分成员函数（即 isbn 和 combine ）紧跟在  <code>public</code>  说明符之后；而数据成员和作为实现部分的函数则跟在  <code>private</code>  说明符后面</p>\n<p>在上面的定义中我们还做了一个微妙的变化，我们使用了  <code>class</code>  关键字而非  <code>struct</code>  开始类的定义。这种变化仅仅是形式上有所不同，实际上我们可以使用这两个关键字中的任何一个定义类。唯一的一点区别是，<strong> <code>struct</code>  和  <code>class</code>  的默认访问权限不太一样</strong></p>\n<p><strong>类可以在它的第一个访问说明符之前定义成员，这种成员的访问权限依赖于类定义的方式</strong></p>\n<ul>\n<li>\n<p>如果我们使用  <code>struct</code>  关键字，则定义在第一个访问说明符之前的成员是  <code>public</code>  的</p>\n</li>\n<li>\n<p>如果我们使用  <code>class</code>  关键字，则这些成员是  <code>private</code>  的</p>\n</li>\n</ul>\n<p>出于统一编程风格的考虑，<strong>如果我们希望定义的类的所有成员是  <code>public</code>  的，使用  <code>struct</code>  ；反之，如果希望成员是  <code>private</code>  的，使用  <code>class</code> </strong></p>\n<h1 id=\"友元\"><a class=\"anchor\" href=\"#友元\">#</a> 友元</h1>\n<p>类可以将其他类或者函数声明成为它的 <strong>友元</strong>（friend），从而允许其他类或者函数访问它的非公有成员</p>\n<p><strong>如果类想把一个函数作为它的友元，需要增加一条以  <code>friend</code>  关键字开始的函数声明语句</strong></p>\n<p>例如，此前 <a href=\"https://jiankychen.github.io/posts/375bbd22\">定义抽象数据类型</a> 时的 read、print 和 add 函数并不是类的成员，但却需要访问 Sales_data 类中  <code>private</code>  的数据成员，因此，我们需要将 read、print 和 add 函数作为 Sales_data 类的友元</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sales_data</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 为 Sales_data 的非成员函数所做的友元声明</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">friend</span> Sales_data <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">friend</span> std<span class=\"token double-colon punctuation\">::</span>ostream <span class=\"token operator\">&amp;</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 其他成员及访问说明符与之前一致</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">units_sold</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">revenue</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> bookNo<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    Sales_data <span class=\"token operator\">&amp;</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string bookNo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> units_sold <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">double</span> revenue <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// Sales_data 接口的非成员组成部分的声明</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Sales_data <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream <span class=\"token operator\">&amp;</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>友元声明只能出现在类定义的内部，但是在类内出现的具体位置不限。友元不是类的成员也不受它所在区域访问控制级别的约束</p>\n<blockquote>\n<p>一般来说，最好在类定义开始或结束前的位置集中声明友元</p>\n</blockquote>\n<h2 id=\"友元的声明\"><a class=\"anchor\" href=\"#友元的声明\">#</a> 友元的声明</h2>\n<p>友元的声明仅仅指定了访问的权限，而非一个通常意义上的函数声明</p>\n<p>如果我们希望类的用户能够调用某个友元函数，那么我们就必须在友元声明之外再专门对函数进行一次声明</p>\n<p>为了使友元对类的用户可见，我们通常把友元的声明与类本身放置在同一个头文件中（类的外部）</p>\n<p>因此，我们的 Sales_data 头文件应该为 read 、print 和 add 提供独立的声明（除了类内部的友元声明之外）</p>\n<blockquote>\n<p>许多编译器并未强制限定友元函数必须在使用之前在类的外部声明</p>\n</blockquote>\n<p>一些编译器允许在尚无友元函数的初始声明的情况下就调用它，不过最好还是提供一个独立的函数声明</p>\n<h1 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装</h1>\n<p>封装有两个重要的优点：</p>\n<ul>\n<li>确保用户代码不会无意间破坏封装对象的状态</li>\n<li>被封装的类的具体实现细节可以随时改变，而无须调整用户级别的代码</li>\n</ul>\n<p>一旦把数据成员定义成  <code>private</code>  的，类的作者就可以比较自由地修改数据了</p>\n<ul>\n<li>当实现部分改变时，我们只需要检查类的代码本身以确认这次改变有什么影响。换句话说，只要类的接口不变，用户代码就无须改变</li>\n<li>如果数据是  <code>public</code>  的，所有使用了原来数据成员的代码都可能失效，这时我们必须定位并重写所有依赖于老版本实现的代码，之后才能重新使用该程序</li>\n</ul>\n<p>把数据成员的访问权限设成  <code>private</code>  还有另外一个好处：防止由于用户的原因造成数据被破坏。如果我们发现有程序缺陷破坏了对象的状态，则可以在有限的范围内定位缺陷</p>\n<blockquote>\n<p>尽管当类的定义发生改变时无须更改用户代码，但是使用了该类的源文件必须重新编译</p>\n</blockquote>\n<p>参考：C++ Primer 中文版（第 5 版）</p>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/375bbd22/",
            "url": "https://jiankychen.github.io/posts/375bbd22/",
            "title": "定义抽象数据类型",
            "date_published": "2022-10-25T14:11:12.000Z",
            "content_html": "<p>类的基本思想是<strong>数据抽象</strong>（data abstraction）和<strong>封装</strong>（encapsulation）</p>\n<p>数据抽象是一种依赖于<strong>接口</strong>（interface）和<strong>实现</strong>（implementation）分离的编程（以及设计）技术</p>\n<ul>\n<li>类的接口：包括用户所能执行的操作</li>\n<li>类的实现：包括类的数据成员、负责接口实现的函数体以及定义类所需的各种私有函数</li>\n</ul>\n<p>封装实现了类的接口和实现的分离。封装后的类隐藏了它的实现细节，也就是说，类的用户只能使用接口而无法访问实现部分</p>\n<p>类要想实现数据抽象和封装，需要首先定义一个<strong>抽象数据类型</strong>（abstract data type）</p>\n<ul>\n<li>在抽象数据类型中，由类的设计者负责考虑类的实现过程</li>\n<li>使用该类的程序员则只需要抽象地思考类型做了什么，而无须了解类型的工作细节</li>\n</ul>\n<p>本节将以 Sales_data 类为例，介绍类的定义与使用</p>\n<h1 id=\"设计-sales_data-类\"><a class=\"anchor\" href=\"#设计-sales_data-类\">#</a> 设计 Sales_data 类</h1>\n<p>我们希望 Sales_item 类有一个名为 isbn 的成员函数（member function），并且具有一些等效于 + 、= 、+= 、&lt;&lt;和&gt;&gt; 运算符的函数</p>\n<p>于是，Sales_data 的接口应该包含以下操作：</p>\n<ul>\n<li>一个 isbn 成员函数，用于返回对象的 ISBN 编号</li>\n<li>一个 combine 成员函数，用于将一个 Sales_data 对象加到另一个对象上（等效于 += 运算符）</li>\n<li>一个名为 add 的普通函数，执行两个 Sales_data 对象的加法（等效于 + 运算符）</li>\n<li>一个名为 read 的普通函数，将数据从 istream 读入到 Sales_data 对象中（等效于 &gt;&gt; 运算符）</li>\n<li>一个名为 print 的函数，将 Sales_data 对象的值输出到 ostream （等效于 &lt;&lt; 运算符）</li>\n</ul>\n<p>定义 Sales_data 类如下所示：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Sales_data</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 数据成员</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string bookNo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> units_sold <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">double</span> revenue <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 成员函数：关于 Sales_data 对象的操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> bookNo<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Sales_data<span class=\"token operator\">&amp;</span> <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">double</span> <span class=\"token function\">avg_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 非成员的普通函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Sales_data <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>ostream <span class=\"token operator\">&amp;</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>ostream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中，Sales_data 类的数据成员包括：bookNo 、units_sold 、revenue ，分别表示书本的 ISBN 编号、销量、总销售额；Sales_data 类的成员函数包括 isbn 和 combine ；add、read 和 print 则是普通函数，并未作为 Sales_data 类的成员</p>\n<p>Sales_data 类的使用示例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Sales_data total<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Sales_data trans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> trans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">.</span><span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> trans<span class=\"token punctuation\">.</span><span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            total<span class=\"token punctuation\">.</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>trans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            total <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"No data?!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"定义成员函数\"><a class=\"anchor\" href=\"#定义成员函数\">#</a> 定义成员函数</h2>\n<p><strong>成员函数的声明必须在类的内部，它的定义既可以在类的内部也可以在类的外部</strong></p>\n<p>例如，上述的 isbn 函数定义在 Sales_data 类的内部，combine 和 avg_price 定义在类的外部</p>\n<p>和其他函数一样，类的成员函数也由函数类型、函数名、形参列表和函数体组成。以 isbn 函数为例，isbn 函数用于返回 Sales_data 对象的 bookNo 数据成员，其定义为</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> bookNo<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然而，isbn 函数是如何获得 bookNo 成员所依赖的对象的呢？</p>\n<h3 id=\"this\"><a class=\"anchor\" href=\"#this\">#</a> this</h3>\n<p>不妨先观察 isbn 成员函数的调用：使用点运算符访问 trans 对象的 isbn 成员，由此来调用该函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Sales_data trans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>trans<span class=\"token punctuation\">.</span><span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>成员函数通过一个名为 <strong> <code>this</code> </strong> 的隐式参数来访问调用它的那个对象</strong>。具体来说，当我们调用一个成员函数时，请求该函数的对象地址 将会被用于初始化  <code>this</code></p>\n<p>例如，如果调用  <code>trans.isbn()</code>  ，编译器将会把 trans 的地址传递给 isbn 函数的隐式形参  <code>this</code>  。可以等价地认为，编译器将  <code>trans.isbn()</code>  这一调用重写成了如下形式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 伪代码，用于说明调用成员函数的实际执行过程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Sales_data</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>trans<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>其中，调用 Sales_data 的 isbn 成员时传入了 trans 的地址</p>\n<p>在成员函数内部，可以直接使用调用该函数的对象的成员，而无须通过成员访问运算符来做到这一点，因为  <code>this</code>  所指的就是当前对象。<strong>任何对类成员的直接访问都被看作  <code>this</code>  的隐式引用</strong>，也就是说，当 isbn 使用 bookNo 时，它隐式地使用  <code>this</code>  指向的成员，就像我们书写了 this-&gt;bookNo 一样</p>\n<p>this 形参是隐式定义的。任何自定义名为 this 的参数或变量都是非法的</p>\n<p>我们可以在成员函数体内部使用 this （尽管没有必要）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>bookNo<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>需要注意，<strong> <code>this</code>  是一个常量指针</strong>，不允许改变  <code>this</code>  中保存的地址</p>\n<h3 id=\"const-成员函数\"><a class=\"anchor\" href=\"#const-成员函数\">#</a> const 成员函数</h3>\n<p>isbn 函数的另一个关键之处：参数列表后的  <code>const</code>  关键字，用于修改隐式  <code>this</code>  指针的类型</p>\n<p>默认情况下， <code>this</code>  的类型是指向类类型非常量版本的常量指针。例如，在 Sales_data 的成员函数中，this 的类型是 Sales_data *const</p>\n<p>尽管  <code>this</code>  是隐式的，也依然需要遵循初始化规则，这意味着：（在默认情况下）我们不能把  <code>this</code>  绑定到一个常量对象上，即，我们不能在一个常量对象上调用普通的成员函数（不加  <code>const</code>  的成员函数）</p>\n<p>于是，我们不禁会想到：如果想要在常量对象上调用普通成员函数，就应该将  <code>this</code>  声明成指向常量的指针（即，const Sales_data *const ）。然而， <code>this</code>  是隐式的，并不会出现在参数列表中。那我们应该在哪里将  <code>this</code>  声明成指向常量的指针呢？</p>\n<p>C++ 语言的做法是：允许把  <code>const</code>  关键字放在成员函数的参数列表之后，此时，紧跟在参数列表后面的  <code>const</code>  表示  <code>this</code>  是一个指向常量的指针</p>\n<p>像这样使用  <code>const</code>  的成员函数被称作 <strong>常量成员函数</strong>（const member function）</p>\n<p>因为  <code>this</code>  是指向常量的指针，常量成员函数不能改变调用它的对象的内容</p>\n<p><strong>常量对象，以及常量对象的引用或指针都只能调用常量成员函数</strong></p>\n<h3 id=\"类作用域和成员函数\"><a class=\"anchor\" href=\"#类作用域和成员函数\">#</a> 类作用域和成员函数</h3>\n<p>类本身就是一个作用域，类成员函数的定义嵌套在类的作用域之内</p>\n<p>在上例中，isbn 中用到的名字 bookNo 是定义在 Sales_data 内的数据成员，并且，即使 bookNo 定义在 isbn 之后，isbn 也还是能够使用 bookNo</p>\n<p>这是因为，编译器分两步处理类：首先编译成员的声明，然后才编译成员函数体（如果有的话）</p>\n<p>因此，<strong>成员函数体可以随意使用类中的其他成员，无须在意这些成员出现的次序</strong></p>\n<h3 id=\"在类的外部定义\"><a class=\"anchor\" href=\"#在类的外部定义\">#</a> 在类的外部定义</h3>\n<p>当我们在类的外部定义成员函数时，成员函数的定义必须与它的声明匹配</p>\n<ul>\n<li>返回类型、参数列表和函数名都得与类内部的声明保持一致</li>\n<li>如果成员被声明成常量成员函数，那么它的定义也必须在参数列表后明确指定  <code>const</code>  属性</li>\n</ul>\n<p>并且，类外部定义的成员名字必须包含它所属的类名</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token class-name\">Sales_data</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">avg_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>units_sold<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> revenue<span class=\"token operator\">/</span>units_sold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中，函数名 Sales_data::avg_price 使用作用域运算符来说明 avg_price 函数被声明在类 Sales_data 的作用域内。因此，当 avg_price 使用 revenue 和 units_sold 时，它实际上是使用了 Sales_data 的成员</p>\n<h3 id=\"定义一个返回-this-对象的函数\"><a class=\"anchor\" href=\"#定义一个返回-this-对象的函数\">#</a> 定义一个返回 this 对象的函数</h3>\n<p>函数 combine 的设计初衷类似于复合赋值运算符 += 。调用该函数的对象代表的是赋值运算符左侧的运算对象，右侧运算对象则通过显式的实参被传入函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Sales_data<span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Sales_data</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    units_sold <span class=\"token operator\">+=</span> rhs<span class=\"token punctuation\">.</span>units_sold<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把 rhs 的成员加到 this 对象的成员上</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    revenue <span class=\"token operator\">+=</span> rhs<span class=\"token punctuation\">.</span>revenue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 返回调用该函数的对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当我们的程序调用如下函数时，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>total<span class=\"token punctuation\">.</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>trans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 更新变量 total 的值</span></pre></td></tr></table></figure><p>total 的地址被绑定到隐式的 this 参数上，而 rhs 绑定到了 trans 上</p>\n<p>因此，当 combine 执行下面的语句时，</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>units_sold <span class=\"token operator\">+=</span> rhs<span class=\"token punctuation\">.</span>units_sold<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>等效于 total.units_sold += trans.unit_sold</p>\n<p>一般来说，当我们定义的函数类似于某个内置运算符时，应该令该函数的行为尽量模仿这个运算符</p>\n<ul>\n<li>内置的赋值运算符把它的左侧运算对象当成左值返回</li>\n<li>为了与它保持一致，combine 函数必须返回引用类型。因为此时的左侧运算对象是一个 Sales_data 的对象，所以返回类型应该是 Sales_data&amp;</li>\n</ul>\n<p>如前所述，我们无须使用隐式的  <code>this</code>  指针访问函数调用者的某个具体成员，但是，我们需要使用  <code>this</code>  来把调用函数的对象当成一个整体访问。因此，需要使用</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回调用该函数的对象</span></pre></td></tr></table></figure><p>以获得执行该函数的对象，其中，解引用  <code>this</code>  指针就是得到了 total 的地址</p>\n<h2 id=\"定义类相关的非成员函数\"><a class=\"anchor\" href=\"#定义类相关的非成员函数\">#</a> 定义类相关的非成员函数</h2>\n<p><strong>作为接口组成部分的非成员函数，它们的定义和声明都在类的外部</strong>，例如 add、read 和 print 等</p>\n<blockquote>\n<p>一般来说，如果非成员函数是类接口的组成部分，则这些函数的声明应该与类在同一个头文件内。在这种方式下，用户使用接口的任何部分都只需要引入一个文件</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义 read 函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>istream <span class=\"token operator\">&amp;</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>istream <span class=\"token operator\">&amp;</span>is<span class=\"token punctuation\">,</span> Sales_data <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">double</span> price <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    is <span class=\"token operator\">>></span> item<span class=\"token punctuation\">.</span>bookNo <span class=\"token operator\">>></span> item<span class=\"token punctuation\">.</span>units_sold <span class=\"token operator\">>></span> price<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    item<span class=\"token punctuation\">.</span>revenue <span class=\"token operator\">=</span> price <span class=\"token operator\">*</span> item<span class=\"token punctuation\">.</span>units_sold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 定义 print 函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ostream <span class=\"token operator\">&amp;</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    os <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>units_sold <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span>revenue <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">avg_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 定义 add 函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Sales_data <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data <span class=\"token operator\">&amp;</span>lhs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Sales_data <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    Sales_data sum <span class=\"token operator\">=</span> lhs<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// copy data members from lhs into sum</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    sum<span class=\"token punctuation\">.</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// add data members from rhs into sum</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>read 函数从给定流中将数据读到给定的对象里，print 函数则负责将给定对象的内容打印到给定的流中。其中，read 和 print 分别接受一个各自 IO 类型的引用作为其参数，这是因为 IO 类属于不能被拷贝的类型，因此我们只能通过引用来传递它们。而且，因为读取和写入的操作会改变流的内容，两个函数接受的都是普通引用，而非对常量的引用</p>\n<h1 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h1>\n<p>每个类都分别定义了它的对象被初始化的方式</p>\n<p>类通过一个或几个特殊的成员函数来控制其对象的初始化过程，这些函数叫做 <strong>构造函数</strong>（constructor）</p>\n<ul>\n<li>\n<p><strong>构造函数的名字和类名相同</strong></p>\n</li>\n<li>\n<p>类似于其他函数，构造函数有一个参数列表（可能为空）和一个函数体（可能为空）</p>\n</li>\n<li>\n<p><strong>构造函数没有返回类型</strong></p>\n</li>\n</ul>\n<p>构造函数的任务是初始化类对象的数据成员。无论何时，只要类的对象被创建，就会执行构造函数</p>\n<p>类可以包含多个构造函数，但是，不同的构造函数之间必须在参数数量或参数类型上有所区别（类似于函数重载）</p>\n<p>不同于其他成员函数，构造函数不能被声明成  <code>const</code>  。当我们创建类的一个  <code>const</code>  对象时，直到构造函数完成初始化过程，对象才能真正取得其 “常量” 属性。因此，构造函数在构造  <code>const</code>  对象的过程中可以向其写值</p>\n<h2 id=\"合成的默认构造函数\"><a class=\"anchor\" href=\"#合成的默认构造函数\">#</a> 合成的默认构造函数</h2>\n<p>我们的 Sales_data 类并没有定义任何构造函数，但是之前使用了 Sales_data 对象的程序仍然可以正确编译和运行，因此可以说明，Sales_data 对象执行了默认初始化</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Sales_data total<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有为 total 提供初始值，执行默认初始化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Sales_data trans<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有为 trans 提供初始值，执行默认初始化</span></pre></td></tr></table></figure><p>类通过一个特殊的构造函数来控制默认初始化过程，这个函数叫做 <strong>默认构造函数</strong>（default constructor）</p>\n<ul>\n<li>\n<p>默认构造函数无须任何实参</p>\n</li>\n<li>\n<p>如果我们的类没有显式地定义构造函数，编译器将会为我们隐式地定义一个默认构造函数</p>\n</li>\n</ul>\n<p>编译器自动生成的构造函数被称为<strong>合成的默认构造函数</strong>（synthesized default constructor）</p>\n<p>对于大多数类来说，合成的默认构造函数将按照如下规则初始化类的数据成员：</p>\n<ul>\n<li>如果存在类内的初始值，用类内初始值来初始化成员</li>\n<li>否则，默认初始化该成员</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Sales_data</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string bookNo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> units_sold <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">double</span> revenue <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>例如，对上面的类而言，因为 Sales_data 为 units_sold 和 revenue 提供了初始值，所以合成的默认构造函数将使用这些值来初始化对应的成员，而 bookNo 并未提供初始值，所以合成的默认构造函数把 bookNo 默认初始化成一个空字符串</p>\n<p>然而，合成的默认构造函数只适合非常简单的类，比如现在定义的这个 Sales_data 版本</p>\n<p>通常来说，<strong>一个类必须定义它自己的默认构造函数，而不能仅依赖于合成的默认构造函数</strong> 。这是因为：</p>\n<ul>\n<li>\n<p>只有当类没有声明任何构造函数时，编译器才会自动地生成默认构造函数。一旦我们定义了一些其他的构造函数，类将没有默认构造函数（除非我们自己定义一个默认构造函数）</p>\n</li>\n<li>\n<p>对于某些类来说，合成的默认构造函数可能执行错误的操作。如果类包含有内置类型或者复合类型的成员，则只有当这些成员全都被赋予了类内的初始值时，这个类才适合于使用合成的默认构造函数</p>\n</li>\n<li>\n<p>有的时候编译器不能为某些类合成默认的构造函数。例如，如果类中包含一个其他类类型的成员且这个成员的类型没有默认构造函数，那么编译器将无法初始化该成员。此外，还有其他一些情况也会导致编译器无法生成一个正确的默认构造函数，我们将在以后讨论</p>\n</li>\n</ul>\n<h2 id=\"定义构造函数\"><a class=\"anchor\" href=\"#定义构造函数\">#</a> 定义构造函数</h2>\n<p>对于我们的 Sales_data 类来说，我们可根据实际需要而定义不同的构造函数，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Sales_data</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 数据成员及成员函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string bookNo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> units_sold <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">double</span> revenue <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">isbn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> bookNo<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Sales_data<span class=\"token operator\">&amp;</span> <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Sales_data<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">double</span> <span class=\"token function\">avg_price</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>               <span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">units_sold</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">revenue</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"default\"><a class=\"anchor\" href=\"#default\">#</a> = default</h3>\n<p>在 C++ 11 标准中，如果我们需要默认的行为，可以通过在参数列表后面写上  <code>= default</code>  来要求编译器生成默认构造函数，其作用完全等同于之前使用的合成默认构造函数</p>\n<p>其中， <code>= default</code>  既可以与声明一起出现在类的内部，也可以作为定义出现在类的外部</p>\n<ul>\n<li>如果  <code>= default</code>  在类的内部，则默认构造函数是内联的</li>\n<li>如果它在类的外部，则该成员默认情况下不是内联的</li>\n</ul>\n<blockquote>\n<p>If the  <code>= default</code>  appears inside the class body, the default constructor will be inlined; if it appears on the definition outside the class, the member will not be inlined by default.</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>需注意， <code>= default</code>  生成的默认构造函数之所以对 Sales_data 类有效，是因为我们已经为内置类型的数据成员提供初始值。如果编译器不支持类内初始值，默认构造函数就应该使用构造函数初始值列表来初始化类的每个成员</p>\n<h3 id=\"构造函数初始值列表\"><a class=\"anchor\" href=\"#构造函数初始值列表\">#</a> 构造函数初始值列表</h3>\n<p>对于以下两个构造函数，其定义中出现了新的部分，即，冒号 以及 冒号与花括号之间的代码。我们把新出现的部分称为 <strong>构造函数初始值列表</strong>（constructor initialize list）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> p<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>           <span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">units_sold</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">revenue</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>构造函数初始值列表负责为新创建对象的一个或几个数据成员赋初值</p>\n<p>构造函数初始值列表的组成：</p>\n<ul>\n<li>成员名字</li>\n<li>成员名字后面的、括号（或者花括号）括起来的成员初始值</li>\n<li>不同成员之间的逗号分隔符</li>\n</ul>\n<p>以  <code>Sales_data(const std::string &amp;s, unsigned n, double p): bookNo(s), units_sold(n), revenue(p*n) &#123; &#125;</code>  为例，该函数使用  <code>s</code>  和  <code>n</code>  来分别初始化成员 bookNo 和 units_sold ，并用  <code>p</code>  与  <code>n</code>  的乘积来初始化 revenue</p>\n<p><code>Sales_data(const std::string &amp;s): bookNo(s) &#123; &#125;</code>  ，其只使用  <code>s</code>  来显式初始化 bookNo 。对于 units_sold 和 revenue 这两个成员而言，将利用类内初始值进行隐式初始化（类似于合成默认构造函数的方式）。因此，该构造函数等价于</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>           <span class=\"token function\">bookNo</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">units_sold</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">revenue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>当某个数据成员被构造函数初始值列表忽略时，它将以与合成默认构造函数相同的方式隐式初始化</p>\n</blockquote>\n<p>通常情况下，构造函数使用类内初始值不失为一种好的选择，因为只要这样的初始值存在我们就能确保为成员赋予了一个正确的值。不过，如果你的编译器不支持类内初始值，则所有构造函数都应该显式地初始化每个内置类型的成员</p>\n<p>另外，我们需要注意， <code>Sales_data(const std::string &amp;s): bookNo(s) &#123; &#125;</code>  中的  <code>&#123; &#125;</code>  实际是构造函数的函数体。因为我们定义这些构造函数的目的是为数据成员赋初值，其并不需要通过函数体实现，所以将函数体定义成空的</p>\n<h3 id=\"在类的外部定义构造函数\"><a class=\"anchor\" href=\"#在类的外部定义构造函数\">#</a> 在类的外部定义构造函数</h3>\n<p>与其他几个构造函数不同，以  <code>istream</code>  对象为参数的构造函数  <code>Sales_data(std::istream &amp;)</code>  需要执行一些实际的操作，在它的函数体内调用了 read 函数来给数据成员赋以初值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Sales_data</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Sales_data</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream <span class=\"token operator\">&amp;</span>is<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从 is 中读取一条信息然后存入 this 对象中</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>和其他成员函数一样，<strong>当我们在类的外部定义构造函数时，必须指明该构造函数是哪个类的成员</strong></p>\n<p>因此， <code>Sales_data::Sales_data</code>  指出，我们定义了 Sales_data 类的成员 Sales_data 。因为该成员的名字和类名相同，所以它是一个构造函数（构造函数没有返回类型）</p>\n<p>由于  <code>Sales_data(std::istream &amp;)</code>  函数定义了函数体，在执行该构造函数时，对象的成员是可以被初始化的（尽管这个构造函数初始值列表是空的）</p>\n<h1 id=\"拷贝-赋值和析构\"><a class=\"anchor\" href=\"#拷贝-赋值和析构\">#</a> 拷贝、赋值和析构</h1>\n<p>除了定义类的对象如何初始化之外，类还需要控制拷贝、赋值和销毁对象时发生的行为</p>\n<p>如果我们不主动定义这些操作，编译器将替我们合成它们。一般来说，编译器生成的版本将对对象的每个成员执行拷贝、赋值和销毁操作</p>\n<p>例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>total <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>实际上等价于</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Sales_data 的默认赋值操作等价于</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>total<span class=\"token punctuation\">.</span>bookNo <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span>bookNo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>total<span class=\"token punctuation\">.</span>units_sold <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span>units_sold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>total<span class=\"token punctuation\">.</span>revenue <span class=\"token operator\">=</span> trans<span class=\"token punctuation\">.</span>revenue<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>尽管编译器能替我们合成拷贝、赋值和销毁的操作，但是必须要清楚的一点是，对于某些类来说合成的版本无法正常工作。特别是，当类需要分配类对象之外的资源时，合成的版本常常会失效。例如，管理动态内存的类通常不能依赖于上述操作的合成版本</p>\n<ul>\n<li>很多需要动态内存的类能够并且应该使用 vector 对象或者 string 对象来管理必要的存储空间</li>\n<li>如果类包含 vector 或者 string 成员，则其拷贝、赋值和销毁的合成版本能够正常工作</li>\n</ul>\n<p>参考：C++ Primer 中文版（第 5 版）</p>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/c61b9a60/",
            "url": "https://jiankychen.github.io/posts/c61b9a60/",
            "title": "shoka 主题的若干改动",
            "date_published": "2022-10-19T14:49:50.000Z",
            "content_html": "<p>可先阅读其他博主的文章： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmV2ZXJzZXNhY2xlLmNvbS9TdXBwbGVtZW50LWZvci1zaG9rYS10aGVtZS8=\">shoka 主题功能介绍补充点</span> 、<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGF2ZW5kZXJkaC5jbi9jYXRlZ29yaWVzL1NIT0tBLw==\">shoka 主题进阶玩法</span></p>\n<h1 id=\"修改主页标签名\"><a class=\"anchor\" href=\"#修改主页标签名\">#</a> 修改主页标签名</h1>\n<p>打开  <code>themes\\shoka\\languages</code>  路径下的  <code>zh-CN.yml</code>  文件，找到  <code>favicon</code>  板块，修改  <code>show</code>  和  <code>hide</code></p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">favicon</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">show</span><span class=\"token punctuation\">:</span> Jiankychen</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">hide</span><span class=\"token punctuation\">:</span> Jiankychen</pre></td></tr></table></figure><blockquote>\n<p>本博客根目录 _config.yml 中的语言设置为  <code>language: zh-CN</code>  ，所以这里是修改  <code>zh-CN.yml</code>  文件。若根目录 _config.yml 中的语言设置为  <code>language: en</code>  ，则应修改  <code>en.yml</code>  文件</p>\n</blockquote>\n<h1 id=\"修改加载动画\"><a class=\"anchor\" href=\"#修改加载动画\">#</a> 修改加载动画</h1>\n<p><strong>实现步骤：</strong></p>\n<ul>\n<li>\n<p>打开  <code>themes\\shoka\\source\\css\\_common\\components\\third-party</code>  路径下的  <code>loading.styl</code>  文件，将第 9 行（  <code>$bgColor = var(--grey-1)</code>  ）及以后的内容全部删除，新增以下内容：</p>\n<figure class=\"highlight stylus\"><figcaption data-lang=\"stylus\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>+<span class=\"token func\"><span class=\"token function\">mobile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>+<span class=\"token func\"><span class=\"token function\">tablet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token selector\">.container <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">vh</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">vw</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Helvetica<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token selector\">.loader <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">250</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token selector\">.loader--dot <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">animation-name</span><span class=\"token punctuation\">:</span> loader<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">animation-timing-function</span><span class=\"token punctuation\">:</span> ease-<span class=\"token operator\">in</span>-out<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">animation-duration</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token unit\">s</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">animation-iteration-count</span><span class=\"token punctuation\">:</span> infinite<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">black</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token unit\">px</span> solid <span class=\"token color\">white</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token selector\">.loader--dot:first-child <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#8cc759</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span><span class=\"token unit\">s</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token selector\">.loader--dot:nth-child(2) <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#8c6daf</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.4</span><span class=\"token unit\">s</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token selector\">.loader--dot:nth-child(3) <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#ef5d74</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.3</span><span class=\"token unit\">s</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token selector\">.loader--dot:nth-child(4) <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#f9a74b</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.2</span><span class=\"token unit\">s</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token selector\">.loader--dot:nth-child(5) <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#60beeb</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.1</span><span class=\"token unit\">s</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token selector\">.loader--dot:nth-child(6) <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#fbef5a</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">animation-delay</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token unit\">s</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token selector\">.loader--text <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token unit\">%</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token unit\">rem</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token selector\">.loader--text:after <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Loading\"</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">animation-name</span><span class=\"token punctuation\">:</span> loading-text<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">animation-duration</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2.5</span><span class=\"token unit\">s</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">animation-iteration-count</span><span class=\"token punctuation\">:</span> infinite<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token atrule-declaration\"><span class=\"token atrule\">@keyframes</span> loader <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token selector\">15% <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token property-declaration\"><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token func\"><span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token selector\">45% <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token property-declaration\"><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token func\"><span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">230</span><span class=\"token unit\">px</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  <span class=\"token selector\">65% <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token property-declaration\"><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token func\"><span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">230</span><span class=\"token unit\">px</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  <span class=\"token selector\">95% <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token property-declaration\"><span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token func\"><span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token atrule-declaration\"><span class=\"token atrule\">@keyframes</span> loading-text <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token selector\">0% <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token property-declaration\"><span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Loading\"</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token selector\">25% <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token property-declaration\"><span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Loading.\"</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token selector\">50% <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token property-declaration\"><span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Loading..\"</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token selector\">75% <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token property-declaration\"><span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Loading...\"</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>打开  <code>themes\\shoka\\layout\\_partials</code>  路径下的  <code>layout.njk</code>  文件，将第 14 行（即   <code>&lt;div class=&quot;cat&quot;&gt;</code>  ）至第 29 行（即  <code>&lt;/div&gt;</code>  ）之间的内容（包括第 14 行和第 29 行）替换为</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>container<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>loader<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>loader--dot<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>loader--dot<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>loader--dot<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>loader--dot<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>loader--dot<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>loader--dot<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>loader--text<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>为适配移动端显示，需修改  <code>themes\\shoka\\source\\css\\_common\\outline</code>  路径下的  <code>outline.styl</code>  文件：将</p>\n<figure class=\"highlight stylus\"><figcaption data-lang=\"stylus\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.cat <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property-declaration\"><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token unit\">rem</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>替换为</p>\n<figure class=\"highlight stylus\"><figcaption data-lang=\"stylus\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.loader <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token property-declaration\"><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token unit\">rem</span><span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token property-declaration\"><span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>效果预览：</p>\n<p>\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"rNvXjjd\" data-user=\"jiankychen\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL2ppYW5reWNoZW4vcGVuL3JOdlhqamQ=\">\n  Untitled</span> by Jiankychen (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL2ppYW5reWNoZW4=\">@jiankychen</span>)\n  on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlv\">CodePen</span>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n</p>\n<p>加载动画列表：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3NlYXJjaC9wZW5zP3E9bG9hZGVy\">codepen</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly91aXZlcnNlLmlvL2xvYWRlcnM=\">uiverse</span></li>\n</ul>\n<blockquote>\n<p>本加载动画源自于 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL0FzTGl0dGxlRGVzaWduL3Blbi9aYlZWd2E=\">Dave McCarthy</span></p>\n</blockquote>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmV2ZXJzZXNhY2xlLmNvbS9TdXBwbGVtZW50LWZvci1zaG9rYS10aGVtZS8=\">替换加载动画</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGF2ZW5kZXJkaC5jbi9wb3N0cy82MDgwMTIyMzMv\">修改加载动画</span></li>\n</ul>\n<h1 id=\"mermaid-无法正常显示\"><a class=\"anchor\" href=\"#mermaid-无法正常显示\">#</a> mermaid 无法正常显示</h1>\n<p>在安装  <code>hexo-renderer-multi-markdown-it</code>  插件时， <code>puppeteer</code>  可能会因为版本过低而安装失败，进一步导致无法正确显示 mermaind 流程图</p>\n<p>解决方案：命令行进入到  <code>node_modules\\hexo-renderer-multi-markdown-it</code>  路径，输入</p>\n<pre><code>npm i puppeteer --save\n</code></pre>\n<p>以安装  <code>puppeteer</code></p>\n<blockquote>\n<p>据网友消息， <code>mermaid</code>  可能不会被正确识别为 token，具体可参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmxpcTIuY29tL2FydGljbGUvZmYyOTAwMmU=\">解决 hexo-shoka 主题的流程图 mermaid 不能正常显示问题</span></p>\n</blockquote>\n<h1 id=\"使用外链头像\"><a class=\"anchor\" href=\"#使用外链头像\">#</a> 使用外链头像</h1>\n<p>在采用 Jsdelivr 静态缓存的情况下，由于某种未知原因，博客侧边栏的头像经常无法显示，现考虑使用外部链接的图片作为头像</p>\n<p>实现步骤：</p>\n<ul>\n<li>\n<p>打开  <code>themes\\shoka\\layout\\_partials\\post</code>  路径下的  <code>post.njk</code>  文件，将</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">hidden</span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">itemscope</span> <span class=\"token attr-name\">itemtype</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schema.org/Person<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; url_for(theme.statics + theme.images + '/' + theme.sidebar.avatar) &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; author &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; subtitle &#125;&#125;, &#123;&#123; description &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>替换为</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">hidden</span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">itemscope</span> <span class=\"token attr-name\">itemtype</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schema.org/Person<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  &#123;%- if 'http' in theme.sidebar.avatar %&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; url_for(theme.sidebar.avatar) &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  &#123;%- else %&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; url_for(theme.statics + theme.images + '/' + theme.sidebar.avatar) &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  &#123;%- endif %&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; author &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; subtitle &#125;&#125;, &#123;&#123; description &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>打开  <code>themes\\shoka\\layout\\_partials\\sidebar</code>  路径下的  <code>overview.njk</code>  文件，将</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">itemscope</span> <span class=\"token attr-name\">itemtype</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schema.org/Person<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; author &#125;&#125;<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token attr-name\">data-src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; url_for(theme.statics + theme.images + '/'+ theme.sidebar.avatar) &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>&#123;&#123; author &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>&#123;&#123; description &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>替换为</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">itemscope</span> <span class=\"token attr-name\">itemtype</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schema.org/Person<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; author &#125;&#125;<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token attr-name\">&#123;%-</span> <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">'http'</span> <span class=\"token attr-name\">in</span> <span class=\"token attr-name\">theme.sidebar.avatar</span> <span class=\"token attr-name\">%&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token attr-name\">data-src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; url_for(theme.sidebar.avatar) &#125;&#125;<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token attr-name\">&#123;%-</span> <span class=\"token attr-name\">else</span> <span class=\"token attr-name\">%&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token attr-name\">data-src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; url_for(theme.statics + theme.images + '/'+ theme.sidebar.avatar) &#125;&#125;<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token attr-name\">&#123;%-</span> <span class=\"token attr-name\">endif</span> <span class=\"token attr-name\">%&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>&#123;&#123; author &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>&#123;&#123; description &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>打开主题 _config.yml 文件，找到  <code>sidebar</code>  板块，将  <code>avatar</code>  值设为外部链接，例如</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">avatar</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//s2.loli.net/2023/01/01/hnmYMxBAwF9QelU.jpg</pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"去除首页-subtitle-两侧的-号\"><a class=\"anchor\" href=\"#去除首页-subtitle-两侧的-号\">#</a> 去除首页 subtitle 两侧的 = 号</h1>\n<p>首页 subtitle 两侧会显示出一个 = 号，这里考虑将其去除</p>\n<p><strong>实现方式：</strong></p>\n<p>打开  <code>themes\\shoka\\layout\\_partials</code>  路径下的  <code>layout.njk</code>  文件，将第 42 行（  <code>&lt;p class=&quot;meta&quot; itemprop=&quot;description&quot;&gt;= &#123;&#123; subtitle &#125;&#125; =&lt;/p&gt;</code>  ）替换为</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>meta<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>&#123;&#123; subtitle &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>效果对比：</strong></p>\n<ul>\n<li height=\"150px\">\n<p>去除前<br />\n <img data-src=\"/posts/c61b9a60/before.png\" class=\"\"></p>\n</li>\n<li height=\"150px\">\n<p>去除后<br />\n <img data-src=\"/posts/c61b9a60/after.png\" class=\"\"></p>\n</li>\n</ul>\n<p>也可以将 = 号替换成其他字符或图标，例如：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>meta<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">itemprop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>~<span class=\"token strike\"><span class=\"token punctuation\">~~</span><span class=\"token content\"> &#123;&#123; subtitle &#125;&#125; </span><span class=\"token punctuation\">~~</span></span>~<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>效果：</strong></p>\n<p height=\"150px\"><img data-src=\"/posts/c61b9a60/replace.png\" class=\"\"></p>\n<h1 id=\"添加页脚站点运行时长\"><a class=\"anchor\" href=\"#添加页脚站点运行时长\">#</a> 添加页脚：站点运行时长</h1>\n<p><strong>实现步骤：</strong></p>\n<ul>\n<li>\n<p>打开  <code>themes\\shoka\\languages</code>  路径下的  <code>zh-CN.yml</code>  文件，找到  <code>footer</code>  板块，添加以下内容：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">timing</span><span class=\"token punctuation\">:</span> 本站已运行</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">days</span><span class=\"token punctuation\">:</span> 天</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">hours</span><span class=\"token punctuation\">:</span> 时</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">minutes</span><span class=\"token punctuation\">:</span> 分</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">seconds</span><span class=\"token punctuation\">:</span> 秒</pre></td></tr></table></figure></li>\n<li>\n<p>打开  <code>themes\\shoka\\layout\\_partials</code>  路径下的  <code>footer.njk</code>  文件，在  <code>&lt;/div&gt;</code>  与  <code>&#123;%- if theme.footer.count %&#125;</code>  之间插入以下内容：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>timing<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>RunTime<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">var</span> BootDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021/10/24 23:00:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#123;</span># 站点起始时间 #<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">ShowRunTime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">var</span> NowDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">var</span> RunDateM <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>NowDate <span class=\"token operator\">-</span> BootDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">var</span> RunDays <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>RunDateM<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">3600</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">var</span> RunHours <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>RunDateM<span class=\"token operator\">%</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">3600</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">3600</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">var</span> RunMinutes <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>RunDateM<span class=\"token operator\">%</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">3600</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span><span class=\"token number\">3600</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">var</span> RunSeconds <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>RunDateM<span class=\"token operator\">%</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">3600</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span><span class=\"token number\">3600</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">var</span> RunTime <span class=\"token operator\">=</span> RunDays <span class=\"token operator\">+</span> <span class=\"token string\">\" &#123;&#123; __('footer.days') &#125;&#125; \"</span> <span class=\"token operator\">+</span> RunHours <span class=\"token operator\">+</span> <span class=\"token string\">\" &#123;&#123; __('footer.hours') &#125;&#125; \"</span> <span class=\"token operator\">+</span> RunMinutes <span class=\"token operator\">+</span> <span class=\"token string\">\" &#123;&#123; __('footer.minutes') &#125;&#125; \"</span> <span class=\"token operator\">+</span> RunSeconds <span class=\"token operator\">+</span> <span class=\"token string\">\" &#123;&#123; __('footer.seconds') &#125;&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;&#123; __('footer.timing') &#125;&#125; \"</span> <span class=\"token operator\">+</span> RunTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ShowRunTime('RunTime')\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>效果：</strong></p>\n<p><img data-src=\"/posts/c61b9a60/runtime.png\" class=\"\"></p>\n<h1 id=\"添加页脚站点访问量\"><a class=\"anchor\" href=\"#添加页脚站点访问量\">#</a> 添加页脚：站点访问量</h1>\n<p>可以通过 busuanzi 将 站点 / 某个页面的访客数量 添加到 页脚</p>\n<p><strong>实现步骤：</strong></p>\n<ul>\n<li>\n<p>打开  <code>themes\\shoka\\languages</code>  路径下的  <code>zh-CN.yml</code>  文件，找到  <code>footer</code>  板块，添加以下内容</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">views</span><span class=\"token punctuation\">:</span> 次</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">visitors</span><span class=\"token punctuation\">:</span> 人</pre></td></tr></table></figure></li>\n<li>\n<p>打开  <code>themes\\shoka\\layout\\_partials</code>  路径下的  <code>footer.njk</code>  文件，将  <code>&#123;%- if theme.footer.count %&#125;</code>  至  <code>&#123;%- endif %&#125;</code>  之间的内容替换为</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#123;%- if theme.footer.count %&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">async</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.jsdelivr.net/gh/jiankychen/jiankychen.github.io@master/js/busuanzi.pure.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>count<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; __('symbols_count_time.count_total') &#125;&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token code keyword\">      &lt;span class=\"post-meta-item-icon\"></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &lt;i class=\"ic i-file\" aria-hidden=\"true\">&lt;/i></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      &lt;/span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      &lt;span class=\"text\">&#123;&#123; symbolsCountTotal(site) &#125;&#125; &#123;&#123;__('symbols_count_time.word')&#125;&#125;&lt;/span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &lt;/span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    &lt;span class=\"post-meta-divider\">|&lt;/span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    &lt;span title=\"&#123;&#123; __('footer.total_visitors') &#125;&#125;\"></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      &lt;span class=\"post-meta-item-icon\"></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        &lt;i class=\"ic i-person\" aria-hidden=\"true\">&lt;/i></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      &lt;/span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      &lt;span class=\"views\"></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      &lt;span id=\"busuanzi_value_site_uv\">&lt;/span> &#123;&#123; __('footer.visitors') &#125;&#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      &lt;/span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    &lt;/span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    &lt;span class=\"post-meta-divider\">|&lt;/span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    &lt;span title=\"&#123;&#123; __('footer.total_views') &#125;&#125;\"></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      &lt;span class=\"post-meta-item-icon\"></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        &lt;i class=\"ic i-eye\" aria-hidden=\"true\">&lt;/i></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      &lt;/span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      &lt;span class=\"visitors\"></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        &lt;span id=\"busuanzi_value_site_pv\">&lt;/span> &#123;&#123; __('footer.views') &#125;&#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      &lt;/span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    &lt;/span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    &lt;span class=\"post-meta-divider\">|&lt;/span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    &lt;span title=\"&#123;&#123; __('symbols_count_time.time_total') &#125;&#125;\"></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      &lt;span class=\"post-meta-item-icon\"></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        &lt;i class=\"ic i-clock\" aria-hidden=\"true\">&lt;/i></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      &lt;/span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      &lt;span class=\"text\">&#123;&#123; symbolsTimeTotal(site, config.symbols_count_time.awl, config.symbols_count_time.wpm, __('symbols_count_time.time_minutes')) &#125;&#125;&lt;/span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    &lt;/span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>&#123;%- endif %&#125;</pre></td></tr></table></figure></li>\n</ul>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmV2ZXJzZXNhY2xlLmNvbS9Db21wdXRlci1zY2llbmNlL1Nob2thLVRoZW1lL0Fub3RoZXIv\">添加网站浏览量统计功能</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2licnVjZS5pbmZvLzIwMTUvMDQvMDQvYnVzdWFuemkv\">busuanzi 使用教程</span></li>\n</ul>\n<h1 id=\"新增页面访问统计与文章统计\"><a class=\"anchor\" href=\"#新增页面访问统计与文章统计\">#</a> 新增页面：访问统计与文章统计</h1>\n<h2 id=\"添加访问统计页面\"><a class=\"anchor\" href=\"#添加访问统计页面\">#</a> 添加访问统计页面</h2>\n<p>按照 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGF2ZW5kZXJkaC5jbi8=\">Lavender</span> 的文章 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGF2ZW5kZXJkaC5jbi9wb3N0cy8xNDA5NTgzMzg4Lw==\">Shoka 主题：新增博客访问统计页面</span> 做相应配置</p>\n<p>其中，百度商业账号和百度账号的调用方法存在差异，普通用户按照 <span class=\"exturl\" data-url=\"aHR0cHM6Ly90b25namkuYmFpZHUuY29tL2FwaS9tYW51YWwvQ2hhcHRlcjIvb3BlbmFwaS5odG1s\">百度账号接口说明</span> 进行操作，以获取 API Key、Secret Key、Refresh Token、Acess_Token、Site_ID 等信息</p>\n<p>一旦 Acess_Token 过期，可根据以下请求更换新的 Acess_Token 和 Refresh_Token ：</p>\n<pre><code>http://openapi.baidu.com/oauth/2.0/token?grant_type=refresh_token&amp;refresh_token=&#123;REFRESH_TOKEN&#125;&amp;client_id=&#123;CLIENT_ID&#125;&amp;client_secret=&#123;CLIENT_SECRET&#125;\n</code></pre>\n<p>其中：</p>\n<ul>\n<li>\n<p>{REFRESH_TOKEN} 填写 Refresh Token</p>\n</li>\n<li>\n<p>{CLIENT_ID} 填写 API Key</p>\n</li>\n<li>\n<p>{CLIENT_SECRET} 填写 Secret Key</p>\n</li>\n</ul>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGF2ZW5kZXJkaC5jbi9wb3N0cy8xNDA5NTgzMzg4Lw==\">Shoka 主题：新增博客访问统计页面</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmV1cmtvbi5jb20vcG9zdC82MTc2Mzk3Ny5odG1s\">Hexo 博客实时访问统计图</span></li>\n</ul>\n<h2 id=\"添加文章统计功能\"><a class=\"anchor\" href=\"#添加文章统计功能\">#</a> 添加文章统计功能</h2>\n<p>具体可参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGF2ZW5kZXJkaC5jbi9wb3N0cy8zMjY1MTczNzAxLw==\">Shoka 主题：新增文章统计页面</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmV1cmtvbi5jb20vcG9zdC8xMjEzZWY4Mi5odG1s\">Hexo 博客文章统计图</span></p>\n",
            "tags": [
                "Tutorial",
                "Hexo"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/72c3df1c/",
            "url": "https://jiankychen.github.io/posts/72c3df1c/",
            "title": "Dijkstra",
            "date_published": "2022-10-14T03:28:41.000Z",
            "content_html": "<p>Dijkstra 算法是典型最短路算法，用于计算一个节点到其他所有节点的最短路径</p>\n<p>定义：</p>\n<ul>\n<li>代价：<strong>F(n) = g(n)</strong></li>\n<li>g (n) ：从起点到节点 n 的代价（距离）</li>\n<li>open list ：存放 当前可到达、且未确定最小代价路径的节点</li>\n<li>closed list ：存放 已经找到最小代价路径的节点</li>\n</ul>\n<p>流程：</p>\n<ul>\n<li>从起点开始逐步扩展，每一步为一个节点找到代价最小的路径，即：\n<ul>\n<li>从 open list 选择代价最小的节点，将其收录到 closed list</li>\n<li>遍历新收录节点的所有可访问邻节点，更新代价</li>\n</ul>\n</li>\n</ul>\n<p>最优性证明（为什么被收录的节点已经找到代价最小的路径？）：反证法</p>\n<p>特性：</p>\n<ul>\n<li>完备性：如果在起始点和目标点之间有路径解存在，就一定可以得到解；如果得不到解，就一定说明没有解存在</li>\n<li>最优性：对于某个评价指标（一般为路径的长度），规划得到的路径是最优的</li>\n</ul>\n<p>算法：</p>\n<pre><code>将起点放入 open list\n\n执行循环：\n\n- 如果 open list 为空：搜索失败，结束\n- 取 open list 中代价（即，g(n)）最小的节点（记作 Node1），将其放入 closed list\n- 如果节点 Node1 为终点：找到目标路径，结束\n- 遍历节点 Node1 的（不在 closed list 中的）邻接节点\n    - 记当前遍历的邻接节点为 Node2\n    - 如果节点 Node2 在 open list 中：更新节点 Node2 的代价\n    - 如果节点 Node2 在 open list 中：计算节点 Node2 的代价，并将其加入 open list\n\n待循环结束，即得到从起点到终点的代价最小路径\n</code></pre>\n<h1 id=\"朴素-dijkstra\"><a class=\"anchor\" href=\"#朴素-dijkstra\">#</a> 朴素 Dijkstra</h1>\n<h2 id=\"邻接矩阵法\"><a class=\"anchor\" href=\"#邻接矩阵法\">#</a> 邻接矩阵法</h2>\n<p>采用邻接矩阵 edges 存储边的有关信息，其中，edges [i][j] 表示 i 到 j 的代价，若 edges [i][j] == INT_MAX ，则表示不存在由节点 i 指向节点 j 的边</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>@param:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    edges: 邻接矩阵</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    n: 节点数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    start: 起始点</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>@return: </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    起始点到其他点的最小代价</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> edges<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> INT_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//dist [i] 表示 start 到 i 的最小代价</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    dist<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">//start 到自身的代价为 0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">closedlist</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//closedlist [i] 表示 i 是否在 closed list 中</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>     <span class=\"token comment\">// 从起点开始逐步扩展，每一步为一个节点找到代价最小的路径</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// 不在 closed list 中的、代价最小的节点</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>closedlist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> dist<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                idx <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        closedlist<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 将代价最小的节点 idx 添加到 closed list</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 更新 idx 邻居节点的代价</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>closedlist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> edges<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> INT_MAX<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                dist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dist<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> edges<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> dist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"邻接表法\"><a class=\"anchor\" href=\"#邻接表法\">#</a> 邻接表法</h2>\n<p>采用 <a href=\"https://jiankychen.github.io/posts/ee040603\">链式前向星</a>（用数组模拟实现的链表，也就是静态链表）作为邻接表</p>\n<p>结构体数组 edges 存储所有边：edges [i] 表示第 i 条边</p>\n<ul>\n<li>edges [i].to 表示第 i 条边的终点</li>\n<li>edges [i].next 表示与第 i 条边同起点的下一条边的编号</li>\n<li>edges [i].w 表示第 i 条边的权值</li>\n</ul>\n<p>数组 head 存储顶点的第一条边：head [i] 表示以 i 为起点的第一条边（编号最大的边）的编号</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>@param:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    edges: 静态链表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    head: 节点数组</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    n: 节点数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    start: 起始点</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>@return: </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    起始点到其他点的最小代价</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>Edge<span class=\"token operator\">&amp;</span> edges<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> INT_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    dist<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">closedlist</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>closedlist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> dist<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> dist<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                idx <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        closedlist<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> head<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 遍历链式前向星</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            dist<span class=\"token punctuation\">[</span>edges<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>edges<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dist<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> edges<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> dist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"堆优化-dijkstra\"><a class=\"anchor\" href=\"#堆优化-dijkstra\">#</a> 堆优化 Dijkstra</h1>\n<p>可以使用堆（优先级队列）来查找 open list 中的代价最小的节点 idx</p>\n<p>定义一个小顶堆：由于  <code>pair&lt;typeA, typeB&gt;</code>  排序时会默认按照  <code>typeA</code>  排序，应将起点到节点的代价作为  <code>typeA</code>  、将节点的编号作为  <code>typeB</code>  ，以便每次可以从堆中取出代价最小的节点</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> pii<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 分别存储代价和节点编号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span>pii<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>pii<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span>pii<span class=\"token operator\">>></span> pq<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 小顶堆</span></pre></td></tr></table></figure><blockquote>\n<p><code>priority_queue</code>  位于  <code>&lt;queue&gt;</code>  头文件， <code>pair</code>  位于  <code>&lt;utility&gt;</code>  头文件</p>\n</blockquote>\n<h2 id=\"邻接矩阵法-2\"><a class=\"anchor\" href=\"#邻接矩阵法-2\">#</a> 邻接矩阵法</h2>\n<p>当探索到一个代价最小的节点 idx 时，会遍历 idx 的邻居节点 i ，如果 dist [idx] + edges [idx][i] &lt; dist [i] ，则需更新节点 i 的代价为 dist [idx] + edges [idx][i]</p>\n<p dist[idx]=\"\" +=\"\" edges[idx][i],=\"\" i=\"\">注意，即便堆中可能已经有 {xx, i} 存在，但由于无法对堆进行寻址访问，故而无法直接将堆中已有的 {xx, i} 更新为</p>\n<p>因此，我们采用的策略是：</p>\n<ul>\n<li>更新 dist [i] 为 dist [idx] + edges [idx][i]</li>\n<li>将 {dist [i], i} 添加到堆（此时，{dist [i], i} 与 {xx, i} 都存在于堆中，但由于 dist [i] &lt; xx ，{dist [i], i} 优先级高于 {xx, i}，因此该操作也等效于更新了堆中的 {xx, i} ）</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>@param:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    edges: 邻接矩阵</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    n: 节点数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    start: 起始点</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>@return: </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    起始点到其他点的最小代价</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">Dijkstra</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> edges<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> INT_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> pii<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    priority_queue<span class=\"token operator\">&lt;</span>pii<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>pii<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span>pii<span class=\"token operator\">>></span> pq<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    dist<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    pq<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        pq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> INT_MAX<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">int</span> cost <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> edges<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cost <span class=\"token operator\">&lt;</span> dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 实时维护 dist 数组，记录当前搜索到的节点 i 的最小代价</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    pq<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可能已经有 &#123;val, i&#125; 在堆中了，但是 val 必然大于 cost</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> dist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"邻接表法-2\"><a class=\"anchor\" href=\"#邻接表法-2\">#</a> 邻接表法</h2>\n<p>堆优化也可以采用链式前向星结构</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>@param:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    edges: 静态链表</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    head: 节点数组</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    n: 节点数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    start: 起始点</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>@return: </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    起始点到其他点的最小代价</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>Edge<span class=\"token operator\">&amp;</span> edges<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">dist</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> INT_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> pii<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    priority_queue<span class=\"token operator\">&lt;</span>pii<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>pii<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span>pii<span class=\"token operator\">>></span> pq<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    dist<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    pq<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        pq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> head<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">int</span> cost <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cost <span class=\"token operator\">&lt;</span> dist<span class=\"token punctuation\">[</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                dist<span class=\"token punctuation\">[</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cost<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                pq<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> dist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"复杂度分析\"><a class=\"anchor\" href=\"#复杂度分析\">#</a> 复杂度分析</h1>\n<p>设图中的节点数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> ，边数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> ，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n \\le m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span></p>\n<p>时间复杂度：</p>\n<ul>\n<li>朴素 Dijkstra 算法：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>堆优化的 Dijkstra 算法：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O((n + m) \\log{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<p>空间复杂度：</p>\n<ul>\n<li>邻接矩阵法：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></li>\n<li>邻接表法：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<p>堆优化的时间复杂度优于朴素算法</p>\n<p>邻接表法的空间复杂度优于邻接矩阵法</p>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMjkzNzM3NDA=\">最短路径问题 — Dijkstra 算法最详解</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NTQzNzMyNTY=\">Dijkstra 算法（附案例详解）</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE5NTYzNjcvYXJ0aWNsZS9kZXRhaWxzLzEyMTIyMjEzOQ==\">Dijkstra 算法的 C++ 实现</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pY2hlYWxvdmVuL2FydGljbGUvZGV0YWlscy8xMTQwNDAxMzY=\">Dijkstra 算法时间复杂度分析</span></li>\n</ul>\n",
            "tags": [
                "算法与数据结构",
                "图"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/8af7b840/",
            "url": "https://jiankychen.github.io/posts/8af7b840/",
            "title": "术语表 - Chapter 6",
            "date_published": "2022-10-05T03:35:38.000Z",
            "content_html": "<p><strong>二义性调用（ambiguous call）</strong> ：是一种编译时发生的错误。造成二义性调用的原因：在函数匹配时，两个或多个函数提供的匹配一样好，编译器找不到唯一的最佳匹配</p>\n<p><strong>实参（argument）</strong> ：函数调用时提供的值，用于初始化函数形参</p>\n<p><strong>Assert</strong> ：是一个预处理宏，作用于一条表示条件的表达式</p>\n<ul>\n<li>当未定义预处理变量 NDEBUG 时，assert 对条件求值</li>\n<li>如果 assert 的条件为假，输出一条错误信息并终止当前程序的执行</li>\n</ul>\n<p><strong>自动对象（automatic object）</strong> ：仅存在于函数执行过程中的对象</p>\n<ul>\n<li>当程序的控制流经过此类对象的定义语句时，创建该对象</li>\n<li>当到达了定义所在的块的末尾时，销毁该对象</li>\n</ul>\n<p><strong>最佳匹配（best match）</strong> ：从一组重载函数中为调用选出的一个函数。最佳匹配（如果存在的话）至少在一个实参上比其他所有可行函数更优，同时，在其他实参的匹配上不会更差</p>\n<p><strong>传引用调用（call by reference）</strong> ：对引用传递的函数的调用</p>\n<p><strong>传值调用（call by value）</strong> ：对值传递的函数的调用</p>\n<p><strong>候选函数（candidate function）</strong> ：解析某次函数调用时考虑的一组函数。候选函数的名字应该与函数调用使用的名字一致，并且在调用点候选函数的声明在作用域之内</p>\n<p><strong>constexpr</strong> ：可以返回常量表达式的函数。一个 constexpr 函数被隐式地声明成内联函数</p>\n<p><strong>默认实参（default argument）</strong> ：当调用缺少了某个实参时，为该实参指定的默认值</p>\n<p><strong>可执行文件（executable file）</strong> ；是操作系统能够执行的文件，包含着与程序有关的代码</p>\n<p><strong>函数（function）</strong> ：可调用的计算单元</p>\n<p><strong>函数体（function body）</strong> ：是一个块，用于定义函数所执行的操作</p>\n<p><strong>函数匹配（function matching）</strong> ：编译器解析重载函数调用的过程，在此过程中，实参与每个重载函数的形参列表逐一比较</p>\n<p><strong>函数原型（function prototype）</strong> ：函数的声明，包含函数名字、返回类型和形参类型。要想调用某函数，在调用点之前必须声明该函数的原型</p>\n<p><strong>隐藏名字（hidden name）</strong> ：某个作用域内声明的名字会隐藏掉外层作用域中声明的同名实体</p>\n<p><strong>initializer_list</strong> ：是一个标准类，表示的是一组花括号包围的类型相同的对象，对象之间以逗号隔开</p>\n<p><strong>内联函数（inline function）</strong> ：请求编译器在可能的情况下在调用点展开函数。内联函数可以避免常见的函数调用开销</p>\n<p><strong>链接（link）</strong> ：是一个编译过程，负责把若干对象文件链接起来形成可执行程序</p>\n<p><strong>局部静态对象（local static object）</strong> ：它的值在函数调用结束后仍然存在。在第一次使用局部静态对象前创建并初始化它，当程序结束时局部静态对象才被销毁</p>\n<p><strong>局部变量（local variable）</strong> ：定义在块中的变量</p>\n<p><strong>无匹配（no match）</strong> ：是一种编译时发生的错误，原因是在函数匹配过程中所有函数的形参都不能与调用提供的实参匹配</p>\n<p><strong>对象代码（object code）</strong> ：编译器将我们的源代码转换成对象代码格式</p>\n<p><strong>对象文件（object file）</strong> ：编译器根据给定的源文件生成的保存对象代码的文件。一个或多个对象文件经过链接生成可执行文件</p>\n<p><strong>对象生命周期（object lifetime）</strong> ：每个对象都有相应的生命周期</p>\n<ul>\n<li>块内定义的非静态对象的生命周期从它的定义开始，到定义所在的块末尾为止</li>\n<li>程序启动后创建全局对象</li>\n<li>程序控制流经过局部静态对象的定义时创建该局部静态对象</li>\n<li>当 main 函数结束时销毁全局对象和局部静态对象</li>\n</ul>\n<p><strong>重载确定（overload resolution）</strong> ：参见函数匹配</p>\n<p><strong>重载函数（overloaded function）</strong> ：函数名与其他函数相同的函数。多个重载函数必须在形参数量或形参类型上有所区别</p>\n<p><strong>形参（parameter）</strong> ：在函数的形参列表中声明的局部变量。用实参初始化形参</p>\n<p><strong>引用传递（pass by reference）</strong> ：描述如何将实参传递给引用类型的形参。引用形参和其他形式的引用工作机理类似，形参被绑定到相应的实参上</p>\n<p><strong>值传递（pass by value）</strong> ：描述如何将实参传递给非引用类型的形参。非引用类型的形参实际上是相应实参值的一个副本</p>\n<p><strong>预处理宏（preprocessor macro）</strong> ：类似于内联函数的一种预处理功能。除了 assert 之外，现代 C++ 程序很少再使用预处理宏了</p>\n<p><strong>递归循环（recursion loop）</strong> ：描述某个递归函数没有终止条件，因而不断调用自身直至耗尽程序栈空间的过程</p>\n<p><strong>递归函数（recursive function）</strong> ：直接或间接调用自身的函数</p>\n<p><strong>返回类型（return type）</strong> ：是函数声明的一部分，用于指定函数返回值的类型</p>\n<p><strong>分离式编译（separate compilation）</strong> ：把一个程序分割成多个独立源文件的能力</p>\n<p><strong>尾置返回类型（trailing return type）</strong> ：在参数列表后面指定的返回类型</p>\n<p><strong>可行函数（viable function）</strong> ：是候选函数的子集。可行函数能匹配本次调用，它的形参数量与调用提供的实参数量相等，并且每个实参类型都能转换成相应的形参类型</p>\n<p><strong>() 运算符（ () operator）</strong> ：调用运算符，用于执行某函数。括号前面是函数名或函数指针，括号内是以逗号隔开的实参列表（可能为空）</p>\n<p>参考：C++ Primer 中文版（第 5 版）</p>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/42aabc7d/",
            "url": "https://jiankychen.github.io/posts/42aabc7d/",
            "title": "函数指针",
            "date_published": "2022-10-05T03:35:16.000Z",
            "content_html": "<p>函数指针（function pointer）指向的是函数而非对象</p>\n<p>类似于其他指针，函数指针也指向一个特定的类型（即，函数的类型）</p>\n<p>函数的类型由它的返回类型和形参类型共同决定，与函数名无关</p>\n<blockquote>\n<p>A function pointer is just that—a pointer that denotes a function rather than an object. Like any other pointer, a function pointer points to a particular type. A function’s type is determined by its return type and the types of its parameters. The function’s name is not part of its type.</p>\n</blockquote>\n<p>例如，以下函数的类型是 bool (const string &amp;, const string &amp;)</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 比较两个 string 对象的长度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">lengthCompare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>要想声明一个可以指向该函数的指针，只需要用指针替换函数名即可：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//pf 指向一个函数，该函数的参数是两个 const string 的引用，返回值是 bool 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>针对 bool (*pf)(const string &amp;, const string &amp;) 的分析逻辑：</p>\n<ul>\n<li>pf 前面有个 * ，表示 pf 是指针</li>\n<li>右侧是形参列表，表示 pf 指向的是函数</li>\n<li>再观察左侧，发现函数的返回类型是布尔值</li>\n<li>因此，pf 就是一个指向函数的指针，其中该函数的参数是两个 const string 的引用，返回值是 bool 类型</li>\n</ul>\n<blockquote>\n<p>*pf 两端的括号必不可少，如果不写这对括号（即： <code>bool *pf(const string &amp;, const string &amp;);</code>  ），pf 将是一个返回类型为 bool * 的函数</p>\n</blockquote>\n<h2 id=\"使用函数指针\"><a class=\"anchor\" href=\"#使用函数指针\">#</a> 使用函数指针</h2>\n<p>当我们把函数名作为一个值使用时，该函数自动地转换成指针</p>\n<p>例如，按照如下形式我们可以将函数 lengthCompare 的地址赋给 pf</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pf <span class=\"token operator\">=</span> lengthCompare<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//pf 指向名为 lengthCompare 的函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pf <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>lengthCompare<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价的赋值语句（取地址符是可选的）</span></pre></td></tr></table></figure><p>我们可以直接使用指向函数的指针来调用该函数，而无须提前解引用指针</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> b1 <span class=\"token operator\">=</span> <span class=\"token function\">pf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"goodbye\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 调用 lengthCompare</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">bool</span> b2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"goodbye\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价的调用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">bool</span> b3 <span class=\"token operator\">=</span> <span class=\"token function\">lengthCompare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"goodbye\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价的调用</span></pre></td></tr></table></figure><p>指向不同函数类型的指针是不可以转换的，但是，我们可以为函数指针赋一个 nullptr 或者值为 0 的整型常量表达式，表示该指针没有指向任何一个函数</p>\n<blockquote>\n<p>There is no conversion between pointers to one function type and pointers to another function type. However, as usual, we can assign nullptr or a zero-valued integer constant expression to a function pointer to indicate that the pointer does not point to any function.</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string<span class=\"token double-colon punctuation\">::</span>size_type <span class=\"token function\">sumLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cstringCompare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pf <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 正确：pf 不指向任何函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pf <span class=\"token operator\">=</span> sumLength<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 错误：返回类型不匹配</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>pf <span class=\"token operator\">=</span> cstringCompare<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误：形参类型不匹配</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>pf <span class=\"token operator\">=</span> lengthCompare<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 正确：函数和指针的类型精确匹配</span></pre></td></tr></table></figure><h2 id=\"重载函数的指针\"><a class=\"anchor\" href=\"#重载函数的指针\">#</a> 重载函数的指针</h2>\n<p>如果定义了指向重载函数的指针，编译器通过指针类型决定选用哪个函数，指针类型必须与重载函数中的某一个精确匹配</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ff</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ff</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ff<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//pf1 指向 ff (unsigned)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ff<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 错误：没有任何一个 ff 与该形参列表匹配</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ff<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误：ff 和 pf3 的返回类型不匹配</span></pre></td></tr></table></figure><h2 id=\"函数指针形参\"><a class=\"anchor\" href=\"#函数指针形参\">#</a> 函数指针形参</h2>\n<p>类似于数组，我们不能定义函数类型的形参，但是，<strong>可以将指向函数的指针作为形参</strong></p>\n<p>我们可以定义一个类似于函数类型的形参，它会自动地转换成指向函数的指针（类似于 <a href=\"https://jiankychen.github.io/posts/350b832e/\">数组形参</a> ）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 第三个形参是函数类型，它会自动地转换成指向函数的指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">useBigger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>               <span class=\"token keyword\">bool</span> <span class=\"token function\">pf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 等价的声明：显式地将形参定义成指向函数的指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">useBigger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>               <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果我们直接将函数作为实参使用，它会自动转换成指针</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自动将函数 lengthCompare 转换成指向该函数的指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">useBigger</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> lengthCompare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>由于直接将函数指针类型作为形参（例如，useBigger 的声明语句中的第三个形参）会显得冗长，可以使用 类型别名 和 decltype 来简化函数指针的代码</p>\n<p>例如：首先使用 typedef 和 decltype 来定义自己的函数类型和函数指针类型</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Func 和 Func2 是函数类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>lengthCompare<span class=\"token punctuation\">)</span> Func2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数类型的等价声明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// FuncP 和 FuncP2 是指向函数的指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>FuncP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数指针类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>lengthCompare<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>FuncP2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数指针类型的等价声明</span></pre></td></tr></table></figure><blockquote>\n<p>注意：decltype 返回的是函数类型，不会将函数类型自动转换成指针类型，所以需要再加上  <code>*</code>  才能得到指针</p>\n</blockquote>\n<p>然后重新声明 useBigger 函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//useBigger 的等价声明，其中使用了类型别名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">useBigger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">useBigger</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> FuncP2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这两个声明语句声明的是同一个函数，在第一条语句中，编译器自动地将 Func 表示的函数类型转换成指针</p>\n<h2 id=\"返回指向函数的指针\"><a class=\"anchor\" href=\"#返回指向函数的指针\">#</a> 返回指向函数的指针</h2>\n<p>类似于数组，我们不能返回一个函数，但是，<strong>可以返回指向函数类型的指针</strong></p>\n<p>由于编译器不会自动将函数返回类型当成对应的指针类型处理，我们必须显式地将返回类型写成指针形式</p>\n<p>声明一个返回函数指针的函数，最直接的办法是（类似于 <a href=\"https://jiankychen.github.io/posts/6944583e/\">返回数组指针</a> ）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token function\">f1</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>按照由内向外的顺序阅读这条声明语句：</p>\n<ul>\n<li>f1 有形参列表，所以 f1 是一个函数</li>\n<li>f1 前面有 * ，所以 f1 返回的是一个指针</li>\n<li>进一步观察发现，指针所指向的类型为 int (int*, int) ，其包含形参列表，因此，该指针指向的是一个返回类型为 int 的函数</li>\n</ul>\n<p>声明一个返回函数指针的函数，最简单的办法是使用类型别名：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">using</span> F <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// F 是函数类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> PF <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// PF 是函数指针类型</span></pre></td></tr></table></figure><p>必须时刻注意的是，和函数类型的形参不一样，返回类型不会自动地转换成指针，因此，我们必须显式地将返回类型指定为指针</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PF <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确：PF 是指向函数的指针，f1 返回指向函数的指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>F <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 错误：F 是函数类型，f1 不能返回一个函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>F <span class=\"token operator\">*</span><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确：将函数返回类型显式地指定为指向函数的指针</span></pre></td></tr></table></figure><p>此外，我们也可以使用尾置返回类型的方式来声明一个返回函数指针的函数（可参考 <a href=\"https://jiankychen.github.io/posts/6944583e/\">使用尾置返回类型</a> ）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"将-auto-和-decltype-用于函数指针类型\"><a class=\"anchor\" href=\"#将-auto-和-decltype-用于函数指针类型\">#</a> 将 auto 和 decltype 用于函数指针类型</h2>\n<p>如果我们明确知道返回的函数是哪一个，可以使用 decltype 关键字将返回类型声明为 函数指针类型</p>\n<p>例如，假定有两个函数，它们的返回类型都是 string::size_type ，并且各有两个 const string&amp; 类型的形参</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string<span class=\"token double-colon punctuation\">::</span>size_type <span class=\"token function\">sumLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string<span class=\"token double-colon punctuation\">::</span>size_type <span class=\"token function\">largerLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此时，我们可以编写第三个函数，它接受一个 string 类型的参数，返回一个指针，该指针指向前两个函数中的某一个</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据其形参的取值，getFcn 函数返回指向 sumLength 或者 largerLength 的指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>sumLength<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token function\">getFcn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：<strong> <code>decltype</code>  并不负责把函数类型转换成对应的指针</strong>，所以 decltype 的结果是个函数类型，因此，我们显式地加上  <code>*</code>  以表明我们需要返回指针而不是函数本身</p>\n<p>参考：C++ Primer 中文版（第 5 版）</p>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/a1233158/",
            "url": "https://jiankychen.github.io/posts/a1233158/",
            "title": "函数匹配",
            "date_published": "2022-10-05T03:35:03.000Z",
            "content_html": "<p>当重载函数的形参数量相等、并且某些形参的类型可以由其他类型转换得到时，不太容易确定某次调用应该选用哪个重载函数</p>\n<h1 id=\"函数匹配\"><a class=\"anchor\" href=\"#函数匹配\">#</a> 函数匹配</h1>\n<p>函数匹配：从一组重载函数中选取最佳函数的过程</p>\n<h2 id=\"函数匹配的步骤\"><a class=\"anchor\" href=\"#函数匹配的步骤\">#</a> 函数匹配的步骤</h2>\n<p>选定本次调用对应的重载函数集</p>\n<ul>\n<li>集合中的函数称为 <strong>候选函数</strong>（candidate function）</li>\n<li>候选函数具备两个特征：\n<ul>\n<li>与被调用的函数同名</li>\n<li>其声明在调用点可见</li>\n</ul>\n</li>\n</ul>\n<p>考察本次调用提供的实参，从候选函数中选出能被这组实参调用的函数</p>\n<ul>\n<li>这些新选出的函数称为 <strong>可行函数</strong>（viable function）</li>\n<li>可行函数具备两个特征：\n<ul>\n<li>形参数量与本次调用提供的实参数量相等（如果函数含有默认实参，在调用该函数时，传入的实参数量可能少于它实际使用的实参数量）</li>\n<li>每个实参的类型与对应的形参类型相同，或者能转换成形参的类型</li>\n</ul>\n</li>\n<li>如果没找到可行函数，编译器将报告无匹配函数的错误</li>\n</ul>\n<p>逐一检查函数调用提供的实参，寻找形参类型与实参类型最匹配的那个可行函数（即，寻找<strong>最佳匹配</strong>）</p>\n<ul>\n<li>如果有且只有一个函数满足下列条件，则匹配成功：\n<ul>\n<li>该函数每个实参的匹配都不劣于其他可行函数需要的匹配</li>\n<li>至少有一个实参的匹配优于其他可行函数提供的匹配</li>\n</ul>\n</li>\n<li>下一节将介绍到：实参类型与形参类型越接近，它们匹配得越好</li>\n<li>如果在检查了所有实参之后没有任何一个函数脱颖而出，则该调用是错误的。此时，编译器将报告二义性调用的信息</li>\n</ul>\n<blockquote>\n<p>调用重载函数时应尽量避免强制类型转换，如果在实际应用中确实需要强制类型转换，则说明我们设计的形参列表不合理</p>\n</blockquote>\n<h2 id=\"实例分析\"><a class=\"anchor\" href=\"#实例分析\">#</a> 实例分析</h2>\n<p>以下面这组函数及其调用为例：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">5.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用 f (double, double)</span></pre></td></tr></table></figure><p>第一步：可以确定上述 4 个名为 f 的函数均为候选函数</p>\n<p>第二步：可以根据实参的数量排除 void f () 和 void f (int, int) ，选出  void f (int) 和 void f (double, double = 3.14) 两个可行函数</p>\n<ul>\n<li>排除的两个函数：我们的调用提供了一个实参，而 void f () 不使用形参，void f (int, int) 使用两个形参</li>\n<li>可行的两个函数：void f (int) 使用一个 int 形参，而我们调用传入的 double 实参可以转换成形参类型 int ；void f (double, double = 3.14) 本应接受两个 double 实参，但因为它含有一个默认实参，所以可以只用一个实参来调用它</li>\n</ul>\n<p>第三步：逐一考察实参，寻找最佳匹配</p>\n<ul>\n<li>调用提供了一个（显式的）double 型实参，如果调用 f (int) ，实参将不得不从 double 转换成 int</li>\n<li>相反，可行函数 void (double, double) 则与实参精确匹配</li>\n<li><strong>精确匹配比需要类型转换的匹配更好</strong>，因此，编译器把 f (5.6) 解析成对函数 void (double, double) 的调用，并使用默认值填补我们未提供的第二个实参</li>\n</ul>\n<p>当实参的数量有两个或更多时，函数匹配就比较复杂了</p>\n<p>例如，考察形如 f (42, 2.56) 的调用：</p>\n<p>第一步：4 个名为 f 的函数均为候选函数</p>\n<p>第二步：确定 void f (int, int) 和 void f (double, double) 为可行函数</p>\n<p>第三步：逐一考察实参，寻找最佳匹配</p>\n<ul>\n<li>考虑第一个实参 42 ：函数 f (int, int) 能精确匹配，而函数 f (double, double) 需要先将 int 类型实参转换成 double 类型。此时，函数 f (int, int) 优于 函数 f (double, double)</li>\n<li>接着考虑第二个实参 2.56 ：函数 f (double, double) 能精确匹配，而函数 f (int, int) 须将 2.56 从 double 类型转换成 int 型。此时，函数 f (double, double) 优于 函数 f (int, int)</li>\n<li>由于每个可行函数各自在一个实参上实现了更好的匹配，无法从整体上判断孰优孰劣。编译器最终将因为这个调用具有二义性而拒绝其请求</li>\n</ul>\n<blockquote>\n<p>看起来我们似乎可以通过强制类型转换其中的一个实参来实现函数的匹配，但是在设计良好的系统中，不应该对实参进行强制类型转换</p>\n</blockquote>\n<h1 id=\"实参类型转换\"><a class=\"anchor\" href=\"#实参类型转换\">#</a> 实参类型转换</h1>\n<p>为了确定最佳匹配，编译器将实参类型到形参类型的转换划分成几个等级，具体排序如下所示（越靠前的，匹配程度越好）：</p>\n<ul>\n<li>精确匹配，其包括以下情况：\n<ul>\n<li>实参类型和形参类型相同</li>\n<li>实参从数组类型或函数类型转换成对应的指针类型</li>\n<li>向实参添加顶层 const 或者从实参中删除顶层 const</li>\n</ul>\n</li>\n<li>通过 const 转换实现的匹配</li>\n<li>通过类型提升实现的匹配</li>\n<li>通过算术类型转换或指针转换实现的匹配</li>\n<li>通过类类型转换实现的匹配</li>\n</ul>\n<h2 id=\"需要类型提升和算术类型转换的匹配\"><a class=\"anchor\" href=\"#需要类型提升和算术类型转换的匹配\">#</a> 需要类型提升和算术类型转换的匹配</h2>\n<p><strong>小整型一般都会提升到 int 类型或更大的整数类型</strong></p>\n<p>例如，假设有两个函数，一个接受 int 、另一个接受 short ，则</p>\n<ul>\n<li>只有当调用提供的是 short 类型的值时才会选择 short 版本的函数</li>\n<li>有时候，即使实参是一个很小的整数值，也会直接将它提升成 int 类型，此时使用 short 版本反而会导致类型转换</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ff</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">ff</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ff</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//char 提升成 int ，调用 f (int)</span></pre></td></tr></table></figure><p><strong>所有算术类型转换的级别都一样</strong></p>\n<p>例如，从 int 向 unsigned int 的转换并不比从 int 向 double 的转换级别高</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">manip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">manip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">manip</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误：二义性调用</span></pre></td></tr></table></figure><h2 id=\"函数匹配和-const-实参\"><a class=\"anchor\" href=\"#函数匹配和-const-实参\">#</a> 函数匹配和 const 实参</h2>\n<p><strong>如果重载函数的区别仅在于函数的引用类型的形参是否为常量引用（或者，指针类型的形参是否为常量指针），编译器将通过实参是否为常量来决定选择哪个函数</strong></p>\n<blockquote>\n<p>When we call an overloaded function that differs on whether a reference or pointer parameter refers or points to const, the compiler uses the constness of the argument to decide which function to call.</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span>Account<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 函数的参数是 Account 的引用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Account<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 函数的参数是 Account 的常量引用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> Account a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Account b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 调用 lookup (const Account&amp;)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 调用 lookup (Account&amp;)</span></pre></td></tr></table></figure><p>第一个调用传入的是 const 对象 a ：因为不能把普通引用绑定到 const 对象上，唯一可行的函数是 以常量引用作为形参的函数 lookup (const Account&amp;) ，并且调用该函数与实参 a 精确匹配</p>\n<p>第二个调用传入的是非常量对象 b ：对于该调用而言，两个函数都是可行的，因为 b 既可以用来初始化常量引用也可以用来初始化非常量引用。然而，用非常量对象来初始化常量引用需要类型转换，因此，应该选用非常量版本的函数 lookup (Account&amp;)</p>\n<p>指针类型的形参也是类似的：如果两个函数的唯一区别是指针形参指向常量或非常量，编译器通过实参是否为常量来决定选用哪个函数</p>\n<ul>\n<li>如果实参是指向常量的指针，调用形参为 const* 的函数</li>\n<li>如果实参是指向非常量的指针，调用形参是普通指针的函数</li>\n</ul>\n<p>参考：C++ Primer 中文版（第 5 版）</p>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/1513ad78/",
            "url": "https://jiankychen.github.io/posts/1513ad78/",
            "title": "特殊用途语言特性",
            "date_published": "2022-10-04T03:34:42.000Z",
            "content_html": "<p>本节我们介绍函数相关的三种语言特性，这些特性对大多数程序都有用，它们分别是：默认实参、内联函数和 constexpr 函数，以及在程序调试过程中常用的一些功能</p>\n<h1 id=\"默认实参\"><a class=\"anchor\" href=\"#默认实参\">#</a> 默认实参</h1>\n<p>有些函数的某个参数在大多数（但不是所有）调用中都被赋予了特定的值。此时，我们可以把这个特定值称为函数的<strong>默认实参</strong>（default argument）</p>\n<p>默认实参作为形参的初始值出现在形参列表中</p>\n<p>例如，我们使用 string 对象表示窗口的内容。一般情况下，我们希望该窗口的高、宽和背景字符都使用默认值，但是同时我们也应该允许用户为这几个参数自由指定与默认值不同的数值。因此，我们为每一个形参都提供了默认实参</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> string<span class=\"token double-colon punctuation\">::</span>size_type sz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string <span class=\"token function\">screen</span><span class=\"token punctuation\">(</span>sz ht <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> sz wid <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> backgrnd <span class=\"token operator\">=</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们可以为一个或多个形参定义默认值，不过需要注意的是，<strong>一旦某个形参被赋予了默认值，它后面的所有形参都必须有默认值</strong></p>\n<p>调用含有默认实参的函数时，可以包含该实参，也可以省略该实参</p>\n<h2 id=\"使用默认实参调用函数\"><a class=\"anchor\" href=\"#使用默认实参调用函数\">#</a> 使用默认实参调用函数</h2>\n<p>如果我们想使用默认实参，只要在调用函数的时候省略该实参就可以了</p>\n<p>函数调用时实参按其位置解析，默认实参负责填补函数调用缺少的尾部实参（靠右侧位置）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string window<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>window <span class=\"token operator\">=</span> <span class=\"token function\">screen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 等价于 screen (24, 80, ' ')</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>window <span class=\"token operator\">=</span> <span class=\"token function\">screen</span><span class=\"token punctuation\">(</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 等价于 screen (66, 80, ' ')</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>window <span class=\"token operator\">=</span> <span class=\"token function\">screen</span><span class=\"token punctuation\">(</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 等价于 screen (66, 256, ' ')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>window <span class=\"token operator\">=</span> <span class=\"token function\">screen</span><span class=\"token punctuation\">(</span><span class=\"token number\">66</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'#'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 等价于 screen (66, 256, '#')</span></pre></td></tr></table></figure><p>要想覆盖 backgrnd 的默认值，必须为 ht 和 wid 提供实参</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window <span class=\"token operator\">=</span> <span class=\"token function\">screen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token char\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误：只能省略尾部的实参</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>window <span class=\"token operator\">=</span> <span class=\"token function\">screen</span><span class=\"token punctuation\">(</span><span class=\"token char\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 调用 screen ('?', 80, ' ')</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                          <span class=\"token comment\">//char 型的 '?' 可以转换成 string::size_type 类型的值 63</span></pre></td></tr></table></figure><p>当设计含有默认实参的函数时，需要合理设置形参的顺序，尽量让不怎么使用默认值的形参出现在前面，让那些经常使用默认值的形参出现在后面</p>\n<h2 id=\"默认实参声明\"><a class=\"anchor\" href=\"#默认实参声明\">#</a> 默认实参声明</h2>\n<p>对于函数的声明来说，通常的习惯是将其放在头文件中，并且一个函数只声明一次，但是多次声明同一个函数也是合法的</p>\n<p>不过有一点需要注意，在给定的作用域中一个形参只能被赋予一次默认实参。换句话说，函数的后续声明只能为之前那些没有默认值的形参添加默认实参，而且该形参右侧的所有形参必须都有默认值</p>\n<p>假如给定</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 表示高度和宽度的形参没有默认值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string <span class=\"token function\">screen</span><span class=\"token punctuation\">(</span>sz<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">=</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们就不能再修改一个已经存在的默认值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token function\">screen</span><span class=\"token punctuation\">(</span>sz<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">=</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误：重复赋予默认实参</span></pre></td></tr></table></figure><p>但是可以按照如下形式添加默认实参</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token function\">screen</span><span class=\"token punctuation\">(</span>sz <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> sz <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确：添加默认实参</span></pre></td></tr></table></figure><blockquote>\n<p>通常，应该在函数声明中指定默认实参，并将该声明放在合适的头文件中</p>\n</blockquote>\n<h2 id=\"默认实参初始值\"><a class=\"anchor\" href=\"#默认实参初始值\">#</a> 默认实参初始值</h2>\n<p>除了<strong>局部变量不能作为默认实参</strong>外，只要表达式的类型能转换成形参所需的类型，该表达式就能作为默认实参</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//wd、def 和 ht 的声明必须出现在函数之外</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sz wd <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> def <span class=\"token operator\">=</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sz <span class=\"token function\">ht</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>string <span class=\"token function\">screen</span><span class=\"token punctuation\">(</span>sz <span class=\"token operator\">=</span> <span class=\"token function\">ht</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sz <span class=\"token operator\">=</span> wd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">=</span> def<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>string window <span class=\"token operator\">=</span> <span class=\"token function\">screen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用 screen (ht (), 80, ' ')</span></pre></td></tr></table></figure><p>用作默认实参的名字（例如 ht () ）会在函数声明所在的作用域内解析，但是会在函数调用时才求值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    def <span class=\"token operator\">=</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 改变了默认实参的值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sz wd <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 隐藏了外层定义的 wd ，但是没有改变默认值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    window <span class=\"token operator\">=</span> <span class=\"token function\">screen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用 screen (ht (), 80, '*')</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们在函数 f2 内部改变了 def 的值，所以对 screen 的调用将会传递这个更新过的值。另一方面，虽然我们的函数还声明了一个局部变量用于隐藏外层的 wd ，但是该局部变量与传递给 screen 的默认实参没有任何关系</p>\n<h1 id=\"内联函数和-constexpr-函数\"><a class=\"anchor\" href=\"#内联函数和-constexpr-函数\">#</a> 内联函数和 constexpr 函数</h1>\n<p>此前我们编写了一个函数 shroterString ，用于比较两个 string 形参的长度并返回长度较小的 string 的引用。将这种规模较小的操作定义成函数，具有以下优点：</p>\n<ul>\n<li>便于阅读</li>\n<li>可以确保行为的统一</li>\n<li>如果我们需要修改计算过程，修改函数要比修改所有等价表达式更容易</li>\n<li>可以被其他应用重复利用</li>\n</ul>\n<p>然而，使用 shorterString 函数也存在一个潜在的缺点：调用函数一般比求等价表达式的值要慢一些</p>\n<p>在大多数机器上，一次函数调用其实包含着一系列工作：</p>\n<ul>\n<li>调用前要先保存寄存器，并在返回时恢复</li>\n<li>可能需要拷贝实参</li>\n<li>程序转向一个新的位置继续执行</li>\n</ul>\n<h2 id=\"内联函数可以避免函数调用的开销\"><a class=\"anchor\" href=\"#内联函数可以避免函数调用的开销\">#</a> 内联函数可以避免函数调用的开销</h2>\n<p>将函数指定为<strong>内联函数</strong>（inline），通常就是将它在每个调用点上 “内联地” 展开</p>\n<p>假设我们把 shorterString 函数定义成内联函数，则如下调用</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">shorterString</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>将在编译过程中展开成类似于下面的形式</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> s1 <span class=\"token operator\">:</span> s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>从而消除了 shorterString 函数的运行时开销</p>\n<p><strong>在函数返回类型的前面加上加上关键字  <code>inline</code>  ，即可将其声明为内联函数</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 内联版本：寻找两个 string 对象中较短的那个</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> <span class=\"token function\">shorterString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> s1 <span class=\"token operator\">:</span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>内联说明只是向编译器发出的一个请求，编译器可以选择忽略这个请求</p>\n</blockquote>\n<p>一般来说，内联机制用于优化规模较小、流程直接、频繁调用的函数</p>\n<p>很多编译器都不支持内联递归函数，而且，一个太长的函数也不太可能在调用点 “内联地” 展开</p>\n<h2 id=\"constexpr-函数\"><a class=\"anchor\" href=\"#constexpr-函数\">#</a> constexpr 函数</h2>\n<p><a href=\"https://jiankychen.github.io/posts/d2de0515\">constexpr 函数</a>（constexpr function）是指能用于常量表达式的函数</p>\n<p>constexpr 函数的定义：</p>\n<ul>\n<li>函数的返回类型及所有形参的类型都必须是字面值类型</li>\n<li>函数体中必须有且只有一条 return 语句</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> <span class=\"token function\">new_sz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> foo <span class=\"token operator\">=</span> <span class=\"token function\">new_sz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 正确：foo 是一个常量表达式</span></pre></td></tr></table></figure><p>在上面的代码中，我们把 new_sz 定义成一个无参数的 constexpr 函数，于是，new_sz 函数返回的是常量表达式，因此可以用 new_sz 函数来初始化 constexpr 类型的变量 foo</p>\n<p>执行该初始化任务时，编译器把对 constexpr 函数的调用替换成其结果值。为了能在编译过程中随时展开，<strong>constexpr 函数被隐式地指定为内联函数</strong></p>\n<blockquote>\n<p>constexpr 函数体内也可以包含其他语句，只要这些语句在运行时不执行任何操作就行。例如，constexpr 函数中可以有空语句、类型别名以及 using 声明</p>\n</blockquote>\n<p>constexpr 函数的返回值可以不是一个常量</p>\n<p>例如：定义一个 constexpr 函数 scale 。当我们给 scale 函数传入一个形如字面值 2 的常量表达式时，它的返回类型也是常量表达式，此时，编译器用相应的结果值替换对 scale 函数的调用。相反，如果我们用一个非常量表达式调用 scale 函数，比如 int 类型的对象 i ，则返回值是一个非常量表达式</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 如果 arg 是常量表达式，则 scale (arg) 也是常量表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">constexpr</span> size_t <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>size_t cnt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token function\">new_sz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> cnt<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 当 scale 的实参是常量表达式时，它的返回值也是常量表达式；反之则不是</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确：scale (2) 是常量表达式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//i 不是常量表达式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">[</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 错误：scale (i) 不是常量表达式</span></pre></td></tr></table></figure><p>当把 scale 函数用在需要常量表达式的上下文中时，编译器会负责检查函数的结果是否符合要求。如果结果恰好不是常量表达式，编译器将发出错误信息</p>\n<blockquote>\n<p>constexpr 函数不一定返回常量表达式</p>\n</blockquote>\n<h2 id=\"把内联函数和-constexpr-函数放在头文件内\"><a class=\"anchor\" href=\"#把内联函数和-constexpr-函数放在头文件内\">#</a> 把内联函数和 constexpr 函数放在头文件内</h2>\n<p>和其他函数不一样，内联函数和 constexpr 函数可以在程序中多次定义</p>\n<p>不过，对于某个给定的内联函数或者 constexpr 函数来说，它的多个定义必须完全一致</p>\n<p>因此，内联函数和 constexpr 函数通常定义在头文件中</p>\n<h1 id=\"调试帮助\"><a class=\"anchor\" href=\"#调试帮助\">#</a> 调试帮助</h1>\n<p>C++ 程序员有时会用到一种类似于 <a href=\"https://jiankychen.github.io/posts/13eb466a\">头文件保护</a> 的技术，以便有选择地执行调试代码</p>\n<p>基本思想：程序可以包含一些用于调试的代码，这些代码只在开发程序时使用。当应用程序编写完成准备发布时，要先屏蔽掉调试代码</p>\n<p>这种方法用到两项预处理功能： <code>assert</code>  和  <code>NDEBUG</code></p>\n<h2 id=\"assert-预处理宏\"><a class=\"anchor\" href=\"#assert-预处理宏\">#</a> assert 预处理宏</h2>\n<p>assert 是一种预处理宏（preprocessor marco）</p>\n<p>预处理宏是一个行为类似于内联函数的预处理变量</p>\n<p>assert 宏使用一个表达式作为它的条件：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其首先对 expr 求值，如果表达式为假（即，值为 0），assert 输出信息并终止程序的执行。如果表达式为真（即，值不为 0），assert 什么也不做</p>\n<p>assert 宏定义在  <code>cassert</code>  头文件中，即：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cassert></span></span></pre></td></tr></table></figure><blockquote>\n<p>预处理名字由预处理器而非编译器管理，因此我们可以直接使用预处理名字，即，直接使用 assert 而不是 std::assert，也不需要为 assert 提供 using 声明</p>\n</blockquote>\n<blockquote>\n<p>和预处理变量一样，宏名字在程序内必须唯一。因此，含有 cassert 头文件的程序不能再定义名为 assert 的变量、函数或者其他实体</p>\n</blockquote>\n<p><strong>assert 宏常用于检查 “不能发生” 的条件</strong></p>\n<p>例如，一个对输入文本进行操作的程序，可能要求所有给定单词的长度都大于某个阈值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"ndebug-预处理变量\"><a class=\"anchor\" href=\"#ndebug-预处理变量\">#</a> NDEBUG 预处理变量</h2>\n<p>NDEBUG 是一个预处理变量，表示当前不处于调试状态（not debug），可用于控制 assert 的行为：</p>\n<ul>\n<li>如果没有定义 NDEBUG ，assert 将执行运行时检查</li>\n<li>如果定义了 NDEBUG ，则 assert 什么也不做</li>\n</ul>\n<p>默认状态下，没有定义 NDEBUG</p>\n<p>我们可以使用一个 #define 语句定义 NDEBUG ，从而关闭调试状态</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">NDEBUG</span> <span class=\"token comment\">// 关闭调试状态（必须定义在 cassert 头文件之前）</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cassert></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>定义 NDEBUG 能避免检查各种条件所需的运行时开销（其实根本就不会执行运行时检查），因此，assert 应该仅用于验证那些确实不可能发生的事情</p>\n<blockquote>\n<p>我们可以把 assert 当成调试程序的一种辅助手段，但是不能用它替代真正的运行时逻辑检查，也不能替代程序本身应该包含的错误检查</p>\n</blockquote>\n<p>除了用于 assert 外，也可以使用 NDEBUG 编写自己的条件调试代码（详见 <a href=\"https://jiankychen.github.io/posts/13eb466a\">预处理变量</a> ）</p>\n<ul>\n<li>如果 NDEBUG 未定义，将执行 #ifndef 和 #endif 之间的代码</li>\n<li>如果定义了 NDEBUG ，则会忽略 #ifndef 和 #endif 之间的代码</li>\n</ul>\n<p>例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ia<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">NDEBUG</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//_ _func_ _ 是编译器定义的一个局部静态变量，用于存放函数的名字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cerr <span class=\"token operator\">&lt;&lt;</span> _ _func_ _ <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": array size is \"</span> <span class=\"token operator\">&lt;&lt;</span> size <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// ...</span></pre></td></tr></table></figure><p>在这段代码中，我们使用变量  <code>_ _func_ _</code>  输出当前调试的函数的名字（即 &quot;print&quot; ）</p>\n<p>编译器为每个函数都定义了  <code>_ _func_ _</code>  ，它是  <code>const char</code>  的一个静态数组，用于存放函数的名字</p>\n<p>除了 C++ 编译器定义的  <code>_ _func_ _</code>  之外，预处理器还定义了另外 4 个用于程序调试的名字：</p>\n<ul>\n<li><code>_ _FILE_ _</code>  ：存放文件名的字符串字面值</li>\n<li><code>_ _LINE_ _</code>  ：存放当前行号的整型字面值</li>\n<li><code>_ _LINE_ _</code>  ：存放当前行号的整型字面值</li>\n<li><code>_ _DATE_ _</code>  ：存放文件编译日期的字符串字面值</li>\n</ul>\n<p>可以使用这些常量在错误消息中提供更多信息，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> threshold<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Error: \"</span> <span class=\"token operator\">&lt;&lt;</span> _ _FILE_ _</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" : in function \"</span> <span class=\"token operator\">&lt;&lt;</span> _ _func_ _</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" at line \"</span> <span class=\"token operator\">&lt;&lt;</span> _ _LINE_ _ <span class=\"token operator\">&lt;&lt;</span> endl</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"       Compiled on \"</span> <span class=\"token operator\">&lt;&lt;</span> _ _DATE_ _</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" at \"</span> <span class=\"token operator\">&lt;&lt;</span> _ _TIME_ _ <span class=\"token operator\">&lt;&lt;</span> endl</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"       Word read was \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> word</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\":  Length too short\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果我们给程序提供了一个长度小于 threshold 的 string 对象，将得到下面的错误消息：</p>\n<pre><code>Error:wdebug.cc : in function main at line 27\n       Compiled on Jul 11 2012 at 20:50:03\n       Word read was &quot;foo&quot;: Length too short\n</code></pre>\n<p>参考：C++ Primer 中文版（第 5 版）</p>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/eefc49a4/",
            "url": "https://jiankychen.github.io/posts/eefc49a4/",
            "title": "函数重载",
            "date_published": "2022-10-04T02:14:03.000Z",
            "content_html": "<p>如果同一作用域内的几个函数名字相同但形参列表不同，我们称之为 <strong>重载</strong>（overloaded）<strong>函数</strong></p>\n<p>例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>cp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>beg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ia<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这些函数接受的形参类型不一样，但是执行的操作非常类似。当调用这些函数时，编译器会根据传递的实参类型推断想要的是哪个函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 调用 print (const char*)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用 print (const int*, size_t)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 调用 print (const int*, const int*)</span></pre></td></tr></table></figure><blockquote>\n<p>main 函数不能重载</p>\n</blockquote>\n<h1 id=\"重载函数的定义与调用\"><a class=\"anchor\" href=\"#重载函数的定义与调用\">#</a> 重载函数的定义与调用</h1>\n<h2 id=\"定义重载函数\"><a class=\"anchor\" href=\"#定义重载函数\">#</a> 定义重载函数</h2>\n<p>重载的函数应该在形参数量或形参类型上有所不同</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一组函数，分别根据名字、电话、账号等信息查找记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Account<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 根据 Account 查找记录</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Phone<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 根据 Phone 查找记录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Name<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 根据 Name 查找记录</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Account acct<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Phone phone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Record r1 <span class=\"token operator\">=</span> <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span>acct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用接受 Account 的版本</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Record r2 <span class=\"token operator\">=</span> <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用接受 Phone 的版本</span></pre></td></tr></table></figure><p>不允许两个函数除了返回类型外其他所有要素都相同：假设有两个函数，它们的形参列表一样但是返回类型不同，则第二个函数的声明是错误的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Account<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Account<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误：与上一个函数相比只有返回类型不同</span></pre></td></tr></table></figure><h2 id=\"判断两个形参的类型是否相异\"><a class=\"anchor\" href=\"#判断两个形参的类型是否相异\">#</a> 判断两个形参的类型是否相异</h2>\n<p>有时候两个形参列表看起来不一样，但实际上是相同的</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 每一对声明都是同一个函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Account <span class=\"token operator\">&amp;</span>acct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Account<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 省略了形参的名字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> Phone Telno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Phone<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Telno<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Telno 和 Phone 的类型相同（Telno 是 Phone 的别名）</span></pre></td></tr></table></figure><p>由于顶层 const 不影响传入函数的对象（详见 <a href=\"https://jiankychen.github.io/posts/350b832e\">参数传递</a> ），一个拥有顶层 const 的形参无法和另一个没有顶层 const 的形参区分开来</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span>Phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 重复声明了 Record lookup (Phone)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span>Phone<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span>Phone<span class=\"token operator\">*</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 重复声明了 Record lookup (Phone*)</span></pre></td></tr></table></figure><p>如果形参是某种类型的指针或引用，则可区分其指向的是常量对象还是非常量对象（此时考虑的是底层 const ），以实现函数重载</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对于接受引用或指针的函数而言，常量对象与非常量对象对应的形参不同</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 定义了 4 个独立的重载函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span>Account<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 函数作用于 Account 的引用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Account<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 新函数，作用于 Account 的常量引用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span>Account<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 新函数，作用于 Account 的指针</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Record <span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Account<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 新函数，作用于指向 Account 常量的指针</span></pre></td></tr></table></figure><p>在上面的例子中，编译器可以通过实参是否是常量来推断应该调用哪个函数</p>\n<ul>\n<li>因为 const 不能转换成其他类型，所以我们只能把 const 对象（或指向 const 的指针）传递给 const 形参</li>\n<li>相反地，因为非常量可以转换成 const ，所以上面的 4 个函数都能作用于非常量对象或者指向非常量对象的指针</li>\n<li>不过，当我们要传递一个非常量对象或者指向非常量对象的指针时，编译器会优先选用非常量版本的函数</li>\n</ul>\n<h2 id=\"建议何时不应该重载函数\"><a class=\"anchor\" href=\"#建议何时不应该重载函数\">#</a> 建议：何时不应该重载函数</h2>\n<p>尽管函数重载能在一定程度上减轻我们为函数起名字、记名字的负担，但是最好只重载那些确实非常相似的操作</p>\n<p>有些情况下，给函数起不同的名字能使得程序更易理解</p>\n<p>例如，以下是几个负责移动屏幕光标的函数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Screen<span class=\"token operator\">&amp;</span> <span class=\"token function\">moveHome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Screen<span class=\"token operator\">&amp;</span> <span class=\"token function\">moveAbs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Screen<span class=\"token operator\">&amp;</span> <span class=\"token function\">moveRel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> string direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>乍看上去，似乎可以把这组函数统一命名为 move ，从而实现函数的重载。然而，重载之后这些函数失去了名字中本来拥有的信息（因为这些函数移动光标的具体方式各不相同）</p>\n<p>一般来说，是否重载函数要看哪个更容易理解</p>\n<h2 id=\"const_cast-和重载\"><a class=\"anchor\" href=\"#const_cast-和重载\">#</a> const_cast 和重载</h2>\n<p><a href=\"https://jiankychen.github.io/posts/61165acd\">const_cast</a> 常常用于有函数重载的上下文中</p>\n<p>考虑下面的 shorterString 函数，其参数和返回类型都是 const string 的引用，我们可以对两个非常量的 string 实参调用这个函数，但返回的仍然是 const string 的引用</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 无论实参是常量还是非常量，返回类型都是 const string &amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token function\">shorterString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 形参是 const string &amp; 类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> s1 <span class=\"token operator\">:</span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>为了实现 “当实参不是常量时，得到的结果是一个普通的引用，即 string &amp;”，可以使用 const_cast 定义一种新的 shorterString 函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token operator\">&amp;</span><span class=\"token function\">shorterString</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">,</span> string <span class=\"token operator\">&amp;</span>s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 形参是 string &amp; 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>r <span class=\"token operator\">=</span> <span class=\"token function\">shorterString</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">const_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                            <span class=\"token generic-function\"><span class=\"token function\">const_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用形参为 const string &amp; 类型的 shorterString 函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">const_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在这个版本的函数中，首先将它的实参强制转换成对 const 的引用，然后调用了 shorterString 函数的 const 版本。const 版本返回对 const string 的引用，这个引用事实上绑定在了某个初始的非常量实参上。因此，我们可以再将其转换回一个普通的 string &amp;</p>\n<h2 id=\"调用重载的函数\"><a class=\"anchor\" href=\"#调用重载的函数\">#</a> 调用重载的函数</h2>\n<p><strong>函数匹配</strong>（function matching）：把函数调用与一组重载函数中的某一个关联起来。具体而言，编译器首先将调用的实参与重载集合中每一个函数的形参进行比较，然后根据比较的结果决定到底调用哪个函数</p>\n<p>函数匹配也叫做<strong>重载确定</strong>（overload resolution）</p>\n<p>调用重载函数时，有三种可能的结果：</p>\n<ul>\n<li>编译器找到一个与实参<strong>最佳匹配</strong>（best match）的函数，并生成调用该函数的代码</li>\n<li>找不到任何一个函数与调用的实参匹配，此时编译器发出<strong>无匹配</strong>（no match）的错误信息</li>\n<li>有多于一个函数可以匹配，但是每一个都不是明显的最佳选择。此时也将发生错误，称为<strong>二义性调用</strong>（ambiguous call）</li>\n</ul>\n<h1 id=\"重载与作用域\"><a class=\"anchor\" href=\"#重载与作用域\">#</a> 重载与作用域</h1>\n<blockquote>\n<p>一般来说，将函数声明置于局部作用域内不是一个明智的选择。但是为了说明作用域和重载的相互关系，我们将暂时违反这一原则而使用局部函数声明</p>\n</blockquote>\n<p>如果我们在内层作用域中声明名字，它将隐藏外层作用域中声明的同名实体</p>\n<p>因此，在不同的作用域中，无法重载函数名</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 重载 print 函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fooBar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ival<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">bool</span> read <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 新作用域，隐藏了外层作用域中声明的 read</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    string s <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误：read 是一个布尔对象，而不是函数（因为外层的 read 函数被隐藏了）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 通常来说，在局部作用域中声明函数不是一个好的选择</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 新作用域，隐藏了外层作用域中的 print</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误：print (const string &amp;) 被隐藏掉了</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 正确：当前 print (int) 可见</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 正确：调用 print (int) （外层的 print (double) 被隐藏了）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当我们调用 print 函数时，编译器首先寻找对该函数名的声明，找到的是接受 int 值的那个局部声明。<strong>一旦在当前作用域中找到了所需的名字，编译器就会忽略掉外层作用域中的同名实体</strong>。剩下的工作就是检查函数调用是否有效了</p>\n<blockquote>\n<p>在 C++ 语言中，名字查找发生在类型检查之前</p>\n</blockquote>\n<p>第一个调用 print (&quot;Value:&quot;) 传入一个字符串字面值，但是当前作用域内 print 函数唯一的声明要求参数是 int 类型，由于字符串字面值无法转换成 int 类型，这个调用是错误的（虽然外层作用域中的 print (const string&amp;) 函数与本次调用匹配，但是它已经被隐藏掉了，根本不会被考虑）</p>\n<p>假设我们把 print (int) 和其他 print 函数声明放在同一个作用域中，则它将成为另一种重载形式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//print 函数的重载形式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//print 函数的另一种重载形式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fooBar2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ival<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Value: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用 print (const string &amp;)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ival<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 调用 print (int)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 调用 print (double)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>参考：C++ Primer 中文版（第 5 版）</p>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/6944583e/",
            "url": "https://jiankychen.github.io/posts/6944583e/",
            "title": "返回类型和 return 语句",
            "date_published": "2022-10-03T14:00:35.000Z",
            "content_html": "<p>return 语句：终止当前正在执行的函数，并将控制权返回到调用该函数的地方</p>\n<p>return 语句的两种形式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 无返回值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">return</span> expression<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有返回值</span></pre></td></tr></table></figure><h1 id=\"无返回值函数\"><a class=\"anchor\" href=\"#无返回值函数\">#</a> 无返回值函数</h1>\n<p>没有返回值的 return 语句只能用在返回类型是 void 的函数中</p>\n<p>返回 void 的函数并不一定要有 return 语句，因为这类函数最后会隐式地执行 return</p>\n<p>一个返回类型是 void 的函数也能使用 return 语句的第二种形式，不过此时 return 语句的 expression 必须是另一个返回 void 的函数</p>\n<p>强行令 void 函数返回其他类型的表达式将产生编译错误</p>\n<h1 id=\"有返回值函数\"><a class=\"anchor\" href=\"#有返回值函数\">#</a> 有返回值函数</h1>\n<p>只要函数的返回类型不是 void ，该函数内的每条 return 语句就必须返回一个值</p>\n<p>return 语句返回值的类型必须与函数的返回类型相同，或者能隐式地转换成函数的返回类型</p>\n<h2 id=\"值是如何被返回的\"><a class=\"anchor\" href=\"#值是如何被返回的\">#</a> 值是如何被返回的</h2>\n<p>返回一个值的方式：返回的值用于初始化调用点的一个临时量，该临时量就是函数调用的结果</p>\n<p>如果函数返回的类型是局部变量，则会返回该变量的副本</p>\n<p>例如，书写一个返回类型是 string 的函数 make_plural，由于该函数的返回类型是 string ，返回值将被拷贝到调用点。即，该函数将返回 word 的副本或者一个未命名的临时 string 对象</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string <span class=\"token function\">make_plural</span><span class=\"token punctuation\">(</span>size_t ctr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>word<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string ending<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>ctr <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> word <span class=\"token operator\">+</span> ending <span class=\"token operator\">:</span> word<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果函数返回引用类型，则不需要拷贝其所引对象</p>\n<p>例如：书写一个函数，其中形参和返回类型都是 const string 的引用，不管是调用函数还是返回结果都不会真正拷贝 string 对象</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 挑出两个 string 对象中较短的那个，返回其引用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token function\">shorterString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> s1 <span class=\"token operator\">:</span> s2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"不要返回局部对象的引用或指针\"><a class=\"anchor\" href=\"#不要返回局部对象的引用或指针\">#</a> 不要返回局部对象的引用或指针</h2>\n<p>函数完成后，它所占用的存储空间也随之被释放掉，因此，不要返回局部对象的引用或指针</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token function\">manip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 严重错误：函数试图返回局部对象的引用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    string ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 错误：返回局部对象的引用！</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token string\">\"Empty\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 错误：\"Empty\" 是一个局部临时量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"返回类类型的函数和调用运算符\"><a class=\"anchor\" href=\"#返回类类型的函数和调用运算符\">#</a> 返回类类型的函数和调用运算符</h2>\n<p>和其他运算符一样，调用运算符也有优先级和结合律</p>\n<p><strong>调用运算符的优先级 与 点运算符和箭头运算符 相同，并且也符合左结合律</strong></p>\n<p>如果函数返回指针、引用或类的对象，我们就能使用函数调用的结果访问结果对象的成员</p>\n<p>例如，我们可以通过如下形式得到较短 string 对象的长度：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 调用 string 对象的 size 成员，该 string 对象是由 shorterString 函数返回的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> sz <span class=\"token operator\">=</span> <span class=\"token function\">shorterString</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"引用返回左值\"><a class=\"anchor\" href=\"#引用返回左值\">#</a> 引用返回左值</h2>\n<p>函数的返回类型决定函数调用是否是左值：调用一个返回引用的函数将会得到左值，其他返回类型将得到右值</p>\n<p>因此，可以像使用其他左值那样来使用返回引用的函数，特别是，可以给返回类型为非常量引用的函数的结果赋值</p>\n<p>例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">get_val</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">,</span> string<span class=\"token double-colon punctuation\">::</span>size_type ix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">[</span>ix<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//get_val 假定索引值是有效的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出 a value</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">get_val</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 s [0] 的值改为 'A'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 输出 A value</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果返回类型是常量引用，则不能给调用的结果赋值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">shorterString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bye\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"X\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误：返回值是个常量</span></pre></td></tr></table></figure><h2 id=\"列表初始化返回值\"><a class=\"anchor\" href=\"#列表初始化返回值\">#</a> 列表初始化返回值</h2>\n<p>C++ 11 标准规定，函数可以返回花括号包围的值的列表，该列表用来初始化函数调用点处的临时量</p>\n<ul>\n<li>如果列表为空，临时量执行值初始化</li>\n<li>否则，返回的值由函数的返回类型决定</li>\n</ul>\n<p>例如：定义一个返回 vector 对象的函数，其中，vector 对象用来存放表示错误信息的 string 对象</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// . . .</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//expected 和 actual 是 string 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 返回一个空 vector 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expected <span class=\"token operator\">==</span> actual<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"functionX\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"okay\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回列表初始化的 vector 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"functionX\"</span><span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">,</span> actual<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果函数返回的是内置类型，则花括号包围的列表最多包含一个值，而且该值所占空间不应该大于目标类型的空间</p>\n<p>如果函数返回的是类类型，由类本身来定义如何使用初始值</p>\n<h2 id=\"主函数-main-的返回值\"><a class=\"anchor\" href=\"#主函数-main-的返回值\">#</a> 主函数 main 的返回值</h2>\n<p>之前介绍过，如果函数的返回类型不是 void ，那么它必须返回一个值。但是这条规则有个例外：允许 main 函数没有 return 语句而直接结束</p>\n<p>这是因为，如果控制到达了 main 函数的结尾处而且没有 return 语句，编译器将隐式地插入一条返回 0 的 return 语句</p>\n<h2 id=\"递归\"><a class=\"anchor\" href=\"#递归\">#</a> 递归</h2>\n<p>如果一个函数调用了它自身，不管这种调用是直接的还是间接的，都称该函数为递归函数（recursive function）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 计算 val 的阶乘</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>main 函数不能调用它自己</p>\n</blockquote>\n<h1 id=\"返回数组指针\"><a class=\"anchor\" href=\"#返回数组指针\">#</a> 返回数组指针</h1>\n<p>因此数组不能被拷贝，所以函数不能返回数组。但是，函数可以返回数组的指针或者引用</p>\n<p>从语法上来说，要想定义一个返回数组的指针或引用的函数比较烦琐，但是有一些方法可以简化这一任务，其中最直接的方法是使用 <a href=\"https://jiankychen.github.io/posts/49ac794f\">类型别名</a></p>\n<p>例如：func 函数返回一个指向包含 10 个整数的数组的指针，其中，arrT 是含有 10 个整数的数组的别名</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> arrT<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//arrT 是一个类型别名，它表示的类型是含有 10 个整数的数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> arrT <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//arrT 的等价声明</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arrT<span class=\"token operator\">*</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//func 返回一个指向含有 10 个整数的数组的指针</span></pre></td></tr></table></figure><h2 id=\"声明一个返回数组指针的函数\"><a class=\"anchor\" href=\"#声明一个返回数组指针的函数\">#</a> 声明一个返回数组指针的函数</h2>\n<p>如果我们想定义一个返回数组指针的函数，并且不希望使用类型别名，则必须满足：</p>\n<ul>\n<li>数组的维度跟在函数名字之后</li>\n<li>函数的形参列表也跟在函数名字后面，并且形参列表应该先于数组的维度</li>\n</ul>\n<p>因此，返回数组指针的函数形式如下所示：</p>\n<pre><code>Type (*function(parameter_list))[dimension]\n</code></pre>\n<p>其中，Type 表示元素的类型，dimension 表示数组的大小，(*function (parameter_list)) 两端的括号必须存在（如果没有这对括号，函数的返回类型将是指针的数组）</p>\n<p>例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以按照以下的顺序来逐层理解该声明的含义：・</p>\n<ul>\n<li>func (int i) 表示调用 func 函数时需要一个 int 类型的实参</li>\n<li>(*func (int i)) 意味着我们可以对函数调用的结果执行解引用操作</li>\n<li>(*func (int i))[10] 表示解引用 func 的调用将得到一个大小为 10 的数组</li>\n<li>int (*func (int i))[10] 表示数组中的元素是 int 类型</li>\n</ul>\n<h2 id=\"使用尾置返回类型\"><a class=\"anchor\" href=\"#使用尾置返回类型\">#</a> 使用尾置返回类型</h2>\n<p>在 C++ 11 标准中还有一种可以简化上述 func 声明的方法，就是使用<strong>尾置返回类型</strong>（trailing return type）</p>\n<p><strong>任何函数的定义都能使用尾置返回</strong>，但是这种形式对于返回类型比较复杂的函数最有效，比如返回类型是数组的指针或者数组的引用</p>\n<p><strong>尾置返回类型跟在形参列表后面，并以一个  <code>-&gt;</code>  符号开头</strong>。为了表示函数真正的返回类型跟在形参列表之后，我们在本应该出现返回类型的地方放置一个  <code>auto</code></p>\n<p>例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//func 接受一个 int 类型的实参，返回一个指针，该指针指向含有 10 个整数的数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>因为我们把函数的返回类型放在了形参列表之后，所以可以清楚地看到 func 函数返回的是一个指针，并且该指针指向了含有 10 个整数的数组</p>\n<h2 id=\"使用-decltype\"><a class=\"anchor\" href=\"#使用-decltype\">#</a> 使用 decltype</h2>\n<p>如果我们知道函数返回的指针将指向哪个数组，可以使用  <code>decltype</code>  关键字声明返回类型</p>\n<p>例如，下面的函数返回一个指针，该指针根据参数 i 的不同指向两个已知数组中的某一个</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> odd<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> even<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 返回一个指针，该指针指向含有 5 个整数的数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>odd<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token function\">arrPtr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token operator\">&amp;</span>odd <span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>even<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回一个指向数组的指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>arrPtr 使用关键字  <code>decltype</code>  表示它的返回类型是个指针，并且该指针所指对象的类型与 odd 一致。因为 odd 是数组，所以 arrPtr 返回一个指向含有 5 个整数的数组的指针</p>\n<p>注意：<strong> <code>decltype</code>  并不负责把数组类型转换成对应的指针</strong>，所以 decltype 的结果是个数组，要想表示 arrPtr 返回指针还必须在函数声明时加一个  <code>*</code>  符号</p>\n<p>参考：C++ Primer 中文版（第 5 版）</p>\n",
            "tags": [
                "C++"
            ]
        },
        {
            "id": "https://jiankychen.github.io/posts/350b832e/",
            "url": "https://jiankychen.github.io/posts/350b832e/",
            "title": "参数传递",
            "date_published": "2022-10-02T14:22:39.000Z",
            "content_html": "<p>每次调用函数时都会重新创建它的形参，并用传入的实参对形参进行初始化</p>\n<ul>\n<li>\n<p>当形参是引用类型时，它将绑定到对应的实参上。此时，我们说它对应的实参被 <strong>引用传递</strong>（passed by reference）或者函数被 <strong>传引用调用</strong>（called by reference）</p>\n</li>\n<li>\n<p>当实参的值被拷贝给形参时，形参和实参是两个相互独立的对象。我们说这样的实参被 <strong>值传递</strong>（passed by value）或者函数被 <strong>传值调用</strong>（called by value）</p>\n</li>\n</ul>\n<h1 id=\"传值参数\"><a class=\"anchor\" href=\"#传值参数\">#</a> 传值参数</h1>\n<p>函数对形参做的所有操作都不会影响实参</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ret <span class=\"token operator\">*=</span> val<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"指针形参\"><a class=\"anchor\" href=\"#指针形参\">#</a> 指针形参</h2>\n<p>可以将指针作为函数的形参</p>\n<ul>\n<li>调用函数时，会将指针实参拷贝给形参（形参和实参是两个相互独立的对象）</li>\n<li>由于形参和实参具有相同的值，可以通过形参间接地访问实参所指的对象，并且可以可以修改它所指对象的值</li>\n<li>改变形参并不会影响实参</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 该函数接受一个指针，然后将指针所指的值置 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ip<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 指针形参</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">*</span>ip <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 改变指针 ip 所指对象的值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ip <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 只改变了 ip 的局部拷贝，实参并未被改变</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>熟悉 C 的程序员常常使用指针类型的形参访问函数外部的对象。在 C++ 语言中，建议使用引用类型的形参替代指针</p>\n</blockquote>\n<h1 id=\"传引用参数\"><a class=\"anchor\" href=\"#传引用参数\">#</a> 传引用参数</h1>\n<p>引用形参绑定到对应的实参上</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 该函数接受一个 int 对象的引用，然后将对象的值置为 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//i 是传给 reset 函数的对象的另一个名字</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 改变了 i 所引对象的值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"使用引用避免拷贝\"><a class=\"anchor\" href=\"#使用引用避免拷贝\">#</a> 使用引用避免拷贝</h2>\n<p>拷贝大的类类型对象或者容器对象是比较低效的，此时可以通过引用传入参数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 比较两个 string 对象的长度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">isShorter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>甚至，有的类类型（包括 IO 类型在内）根本就不支持拷贝操作。此时，函数只能通过引用形参访问该类型的对象</p>\n<blockquote>\n<p>如果函数无须改变引用形参的值，最好将其声明为常量引用</p>\n</blockquote>\n<h2 id=\"使用引用形参返回额外信息\"><a class=\"anchor\" href=\"#使用引用形参返回额外信息\">#</a> 使用引用形参返回额外信息</h2>\n<p>一个函数只能返回一个值，然而有时函数需要同时返回多个值，因此可以考虑通过引用形参获取多个结果</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回 s 中 c 第一次出现的位置索引</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 引用形参 occurs 负责统计 c 出现的总次数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>string<span class=\"token double-colon punctuation\">::</span>size_type <span class=\"token function\">find_char</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                           string<span class=\"token double-colon punctuation\">::</span>size_type <span class=\"token operator\">&amp;</span>occurs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 第一次出现的位置（如果有的话）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    occurs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 出现次数置 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                ret <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 记录 c 第一次出现的位置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token operator\">++</span>occurs<span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 更新出现次数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>            <span class=\"token comment\">//c 出现次数通过 occurs 隐式地返回</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"const-形参和实参\"><a class=\"anchor\" href=\"#const-形参和实参\">#</a> const 形参和实参</h1>\n<p>在用实参初始化形参时，会忽略掉形参的顶层 const</p>\n<p>换而言之，当形参具有顶层 const 时，传给它常量对象或者非常量对象都是可以的（可参考 <a href=\"https://jiankychen.github.io/posts/d2de0515\">const 限定符</a> ）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fcn</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/* fcn 可以读取 i ，但不能向 i 写值 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用 fcn 函数时，既可以传入 const int ，也可以传入 int</p>\n<p>在 C++ 语言中，允许我们定义若干具有相同名字的函数，不过前提是不同函数的形参列表应该有明显的区别，例如：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">helper</span> <span class=\"token punctuation\">(</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 第一个 helper 函数 */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">helper</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 第二个 helper 函数 */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然而，由于形参的顶层 const 会被忽略，以下两个同名函数不能同时定义</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fcn</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fcn</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误：重复定义了 fcn (int)</span></pre></td></tr></table></figure><p>因为顶层 const 被忽略掉了，所以在上面的代码中传入两个 fcn 函数的参数可以完全一样，因此第二个 fcn 是错误的</p>\n<h2 id=\"const-与-指针或引用形参\"><a class=\"anchor\" href=\"#const-与-指针或引用形参\">#</a> const 与 指针或引用形参</h2>\n<p>形参的初始化方式和变量的初始化方式是一样的：</p>\n<ul>\n<li>可以使用非常量来初始化一个底层 const 对象，但是反过来不行</li>\n<li>一个引用必须用同类型的对象初始化</li>\n</ul>\n<p>变量初始化：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>cp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确：但是不能通过 cp 改变 i</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>r <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 正确：但是不能通过 r 改变 i</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>r2 <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> cp<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 错误：p 的类型和 cp 的类型不匹配（存在通过 p 改变 cp 所指对象的风险）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>r3 <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 错误：r3 的类型和 r 的类型不匹配（存在通过 r3 改变 r 所引对象的风险）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>r4 <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 错误：不能用字面值初始化一个非常量引用</span></pre></td></tr></table></figure><p>参数传递：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ci <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>string<span class=\"token double-colon punctuation\">::</span>size_type ctr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 调用形参类型是 int * 的 reset 函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ci<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 错误：不能用指向 const int 对象的指针初始化 int * 形参</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 调用形参类型是 int &amp; 的 reset 函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>ci<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 错误：不能将普通引用绑定到 const 对象 ci 上</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 错误：不能将葡萄引用绑定到字面值上</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>ctr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 错误：类型不匹配，ctr 是无符号类型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">find_char</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'o'</span><span class=\"token punctuation\">,</span> ctr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确：find_char 的第一个形参是对常量的引用</span></pre></td></tr></table></figure><p>要想调用引用版本的 reset ，只能使用 int 类型的对象，而不能使用字面值、求值结果为 int 的表达式、需要转换的对象或者 const int 类型的对象。类似的，要想调用指针版本的 reset，只能使用 int* 类型的对象</p>\n<p>我们能传递一个字符串字面值作为 find_char 的第一个实参，这是因为该函数的引用形参是常量引用，而 C++ 允许我们用字面值初始化常量引用</p>\n<h2 id=\"尽量使用常量引用\"><a class=\"anchor\" href=\"#尽量使用常量引用\">#</a> 尽量使用常量引用</h2>\n<p>将函数不会改变的形参定义成（普通的）引用是一种比较常见的错误，这么做会给函数的调用者造成误导，即，函数可以修改它的实参的值</p>\n<p>此外，使用引用而非常量引用也会极大地限制函数所能接受的实参类型。例如，我们不能把 const 对象、字面值或者需要类型转换的对象传递给普通的引用形参</p>\n<h1 id=\"数组形参\"><a class=\"anchor\" href=\"#数组形参\">#</a> 数组形参</h1>\n<p><a href=\"https://jiankychen.github.io/posts/340249a9\">数组</a> 无法直接通过数组名进行拷贝，因此，无法以值传递的方式使用数组参数</p>\n<p>由于 <a href=\"https://jiankychen.github.io/posts/340249a9\">数组</a>（通常）会被转换成指针，当我们为一个函数传递一个数组时，实际上传递的是指向数组首元素的指针</p>\n<p>尽管不能以值传递的方式传递数组，但是我们可以把形参写成类似数组的形式：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 尽管表现形式不同，但这三个 print 函数是等价的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 每个函数都有一个 const int* 类型的形参</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 函数的意图是作用于一个数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这里的维度表示我们期望的数组维度，实际不一定是这个维度</span></pre></td></tr></table></figure><p>当编译器处理对 print 函数的调用时，只检查传入的参数是否是 const int* 类型</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确：&amp;i 的类型是 int*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 正确：j 转换成 int* 并指向 j [0]</span></pre></td></tr></table></figure><p>如果我们传给 print 函数的是一个数组，则实参自动地转换成指向数组首元素的指针。其中，数组的大小对函数的调用没有影响</p>\n<blockquote>\n<p>以数组作为形参的函数必须确保使用数组时不会越界</p>\n</blockquote>\n<h2 id=\"数组指针形参\"><a class=\"anchor\" href=\"#数组指针形参\">#</a> 数组指针形参</h2>\n<p>因为数组是以指针的形式传递给函数的，所以一开始函数并不知道数组的确切尺寸，调用者应该为此提供一些额外的信息</p>\n<p>管理指针形参有三种常用的技术：</p>\n<ul>\n<li>使用标记指定数组长度</li>\n<li>使用标准库规范</li>\n<li>显式传递一个表示数组大小的形参</li>\n</ul>\n<h3 id=\"使用标记指定数组长度\"><a class=\"anchor\" href=\"#使用标记指定数组长度\">#</a> 使用标记指定数组长度</h3>\n<ul>\n<li>要求数组本身包含一个结束标记</li>\n<li>这种方法适用于那些有明显结束标记且该标记不会与普通数据混淆的情况</li>\n<li>典型示例：C 风格字符串，C 风格字符串存储在字符数组中，并且在最后一个字符后面跟着一个空字符</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 遇到空字符停止</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>cp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// 若 cp 不是一个空指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>cp<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 只要指针所指的字符不是空字符</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>cp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出当前字符并将指针向前移动一个位置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用标准库规范\"><a class=\"anchor\" href=\"#使用标准库规范\">#</a> 使用标准库规范</h3>\n<p>传递指向数组首元素和尾后元素的指针</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>beg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 传入两个指针：一个指向首元素，另一个指向尾元素的下一位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 输出 beg 到 end 之间（不含 end ）的所有元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>beg <span class=\"token operator\">!=</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>beg<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出当前元素并将指针向前移动一个位置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//begin 和 end 函数，分别得到指向数组 j 的首元素和尾后元素的指针</span></pre></td></tr></table></figure><h3 id=\"显式传递一个表示数组大小的形参\"><a class=\"anchor\" href=\"#显式传递一个表示数组大小的形参\">#</a> 显式传递一个表示数组大小的形参</h3>\n<p>即，专门定义一个形参表示数组大小</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//const int ia [] 等价于 const int* ia</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//size 表示数组的大小，将它显式地传给函数，用于控制对 ia 的访问</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> ia<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> size<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> ia<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 大小为 3 的整型数组</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>正如之前所说，当函数不需要对数组元素执行写操作的时候，数组形参应该是指向 const 的指针（即，常量指针）。只有当函数确实要改变元素值的时候，才把形参定义成指向非常量的指针</p>\n<h2 id=\"数组引用形参\"><a class=\"anchor\" href=\"#数组引用形参\">#</a> 数组引用形参</h2>\n<p>C++ 允许将变量定义成数组的引用（详见 <a href=\"https://jiankychen.github.io/posts/340249a9\">数组</a> ），同样地，也允许将形参定义成数组的引用，此时，引用形参绑定到对应的数组上</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 正确：形参是数组的引用，维度是类型的一部分</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> elem <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> elem <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意， <code>&amp;arr</code>  两端的括号必不可少：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>arr <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 错误：将 arr 声明成了引用的数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 正确：arr 是具有 10 个整数的整型数组的引用</span></pre></td></tr></table></figure><p>数组大小是构成数组类型的一部分，只要不超过维度，就可以在函数体内放心地使用数组</p>\n<p>然而，这一用法也在无形中限制了 print 函数的可用性，即，只能将函数作用于大小为 10 的数组：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 错误：实参不是含有 10 个整数的数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 错误：实参不是含有 10 个整数的数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 正确：实参是含有 10 个整数的数组</span></pre></td></tr></table></figure><h2 id=\"传递多维数组\"><a class=\"anchor\" href=\"#传递多维数组\">#</a> 传递多维数组</h2>\n<p>将多维数组传递给函数时，真正传递的是指向数组首元素的指针</p>\n<p>因为我们处理的是数组的数组，首元素本身就是一个数组，数组第二维（以及后面所有维度）的大小都是数组类型的一部分，不能省略</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//matrix 指向数组的首元素，该数组的元素是由 10 个整数构成的数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rowSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//matrix 是一个指向含有 10 个整数的数组的指针</span></pre></td></tr></table></figure><p>注意， <code>*matrix</code>  两端的括号必不可少</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>matrix<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 10 个指针构成的数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指向含有 10 个整数的数组的指针</span></pre></td></tr></table></figure><p>我们也可以使用数组的语法定义函数（此时编译器会一如既往地忽略掉第一个维度，所以最好不要把它包括在形参列表内）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//matrix 看似是一个二维数组，实则是指向含有 10 个整数的数组的指针</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> matrix<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rowSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"main-处理命令行选项\"><a class=\"anchor\" href=\"#main-处理命令行选项\">#</a> main: 处理命令行选项</h1>\n<p>到目前为止，我们定义的 main 函数都只有空形参列表：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然而，有时我们确实需要给 main 传递实参。一种常见的情况是，用户通过设置一组选项来确定函数所要执行的操作。例如，假定 main 函数位于可执行文件 prog 之内，我们可以向程序传递下面的选项：</p>\n<pre><code>prog -d -o ofile data0\n</code></pre>\n<p>这些命令行选项通过两个（可选的）形参传递给 main 函数：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第二个形参 argv 是一个数组，它的元素是指向 C 风格字符串的指针；第一个形参 argc 表示数组中字符串的数量</p>\n<p>因为第二个形参是数组，所以 main 函数也可以定义成：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//argv 执指向 char*</span></pre></td></tr></table></figure><p>当实参传给 main 函数之后，argv 的第一个元素指向程序的名字或者一个空字符串，接下来的元素依次传递命令行提供的实参。最后一个指针之后的元素值保证为 0</p>\n<p>以上面提供的命令行  <code>prog -d -o ofile data0</code>  为例，argc 等于 5，argv 包含如下 C 风格字符串</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"prog\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 或者 argv [0] 也可以指向一个空字符串</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"-d\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"-o\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ofile\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"data0\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>argv<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>当使用  <code>argv</code>  中的实参时，一定要记得可选的实参从  <code>argv[1]</code>  开始； <code>argv[0]</code>  保存程序的名字，而非用户输入</p>\n</blockquote>\n<h1 id=\"含有可变形参的函数\"><a class=\"anchor\" href=\"#含有可变形参的函数\">#</a> 含有可变形参的函数</h1>\n<p>有时我们无法提前预知应该向函数传递几个实参。例如，我们想要编写代码输出程序产生的错误信息，此时最好用同一个函数实现该项功能，以便对所有错误的处理能够整齐划一。然而，错误信息的种类不同，所以调用错误输出函数时传递的实参也各不相同</p>\n<p>为了编写能处理不同数量实参的函数，C++ 11 新标准提供了两种主要的方法：</p>\n<ul>\n<li>如果所有的实参类型相同，可以传递一个名为  <code>initializer_list</code>  的标准库类型</li>\n<li>如果实参的类型不同，我们可以编写一种特殊的函数，也就是所谓的可变参数模板</li>\n</ul>\n<p>C++ 还有一种特殊的形参类型（即省略符），可以用它传递可变数量的实参（这种功能<strong>一般只用于与 C 函数交互的接口程序</strong>）</p>\n<h2 id=\"initializer_list-形参\"><a class=\"anchor\" href=\"#initializer_list-形参\">#</a> initializer_list 形参</h2>\n<p>如果函数的实参数量未知、但是全部实参的类型都相同，我们可以使用 initializer_list 类型的形参</p>\n<p>initializer_list 是一种标准库类型，用于表示某种特定类型的值的数组</p>\n<p>initializer_list 类型定义在同名的头文件中</p>\n<p><img data-src=\"/posts/350b832e/initializer_list.png\" class=\"\"></p>\n<p>和 <a href=\"https://jiankychen.github.io/posts/adaa911e\">vector</a> 一样，initializer_list 也是一种模板类型。定义 initializer_list 对象时，必须说明列表中所含元素的类型</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>initializer_list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ls<span class=\"token punctuation\">;</span> <span class=\"token comment\">//initializer_list 的元素类型是 string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>initializer_list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> li<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//initializer_list 的元素类型是 int</span></pre></td></tr></table></figure><p>和 vector 不一样的是，initializer_list 对象中的元素永远是常量值，我们无法改变 initializer_list 对象中元素的值</p>\n<p>我们使用如下的形式编写输出错误信息的函数，使其可以作用于可变数量的实参：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">error_msg</span><span class=\"token punctuation\">(</span>initializer_list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> il<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> beg <span class=\"token operator\">=</span> il<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> beg <span class=\"token operator\">!=</span> il<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>beg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>beg <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中，作用于 initializer_list 对象的 begin 和 end 操作类似于 vector 对应的成员</p>\n<ul>\n<li>begin () 成员提供一个指向列表首元素的指针</li>\n<li>end () 成员提供一个指向列表尾后元素的指针</li>\n</ul>\n<p>initializer_list 包含 begin 和 end 成员，因此可以使用 <a href=\"https://jiankychen.github.io/posts/3d73fa60\">范围 for </a> 循环处理其中的元素</p>\n<p>如果想向 initializer_list 形参中传递一个值的序列，则必须把序列放在一对花括号内</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//expected 和 actual 是 string 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expected <span class=\"token operator\">!=</span> actual<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">error_msg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"functionX\"</span><span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">,</span> actual<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">error_msg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"functionX\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"okay\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>含有 initializer_list 形参的函数也可以同时拥有其他形参。例如，调试系统可能有个名为 ErrCode 的类，用来表示不同类型的错误，因此我们可以改写之前的程序，使其包含一个 initializer_list 形参和一个 ErrCode 形参</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">error_msg</span><span class=\"token punctuation\">(</span>ErrCode e<span class=\"token punctuation\">,</span> initializer_list<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> il<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">msg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>elem <span class=\"token operator\">:</span> il<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> elem <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>为了调用这个版本的 error_msg 函数，需要额外传递一个 ErrCode 实参</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expected <span class=\"token operator\">!=</span> actual<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">error_msg</span><span class=\"token punctuation\">(</span><span class=\"token function\">ErrCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"functionX\"</span><span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">,</span> actual<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">error_msg</span><span class=\"token punctuation\">(</span><span class=\"token function\">ErrCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"functionX\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"okay\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"省略符形参\"><a class=\"anchor\" href=\"#省略符形参\">#</a> 省略符形参</h2>\n<p>省略符形参是为了便于 C++ 程序访问某些（使用了名为 varargs 的 C 标准库功能的）C 代码而设置的</p>\n<p>通常，省略符形参不应用于其他目的</p>\n<blockquote>\n<p>省略符形参应该仅仅用于 C 和 C++ 通用的类型<br />\n特别应该注意的是，大多数类类型的对象在传递给省略符形参时都无法正确拷贝</p>\n</blockquote>\n<p><strong>省略符形参只能出现在形参列表的最后一个位置</strong>，它的形式无外乎以下两种:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>parm_list<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>第一种形式指定了 foo 函数的部分形参的类型，对应于这些形参的实参将会执行正常的类型检查</p>\n<p>省略符形参所对应的实参无须类型检查</p>\n<p>在第一种形式中，形参声明后面的逗号是可选的</p>\n<p>参考：C++ Primer 中文版（第 5 版）</p>\n",
            "tags": [
                "C++"
            ]
        }
    ]
}